
from "base/kaldi-math.h":
  namespace `kaldi`:

    class RandomState:
     
      seed: int
     
    def `Rand` as rand(state: RandomState = default) -> int

    def `RandInt` as _rand_int(first: int, last: int, state: RandomState = default) -> int

    def `WithProb` as _with_prob(prob:float, state: RandomState = default) -> bool

    def `RandUniform` as rand_uniform(state: RandomState = default) -> float

    def `RandGauss` as rand_gauss(state: RandomState = default) -> float

    def `RandPoisson` as rand_poisson(lambda: float, state: RandomState = default) -> int

    def `RandPrune` as rand_prune(post:float, prune_tresh:float, state: RandomState = default) -> float

    def `ApproxEqual` as approx_equal(a:float, b:float, relative_tolerance:float = default) -> bool

    def `RoundUpToNearestPowerOfTwo` as _round_up_to_nearest_power_of_two(n:int) -> int

    def `DivideRoundingDown` as divide_rounding_down(a:int, b:int) -> int

    def `Gcd` as gcd(m:int, n:int) -> int

    def `Lcm` as _lcm(m:int, n:int) -> int

    def `Factorize` as _factorize(m:int) -> list<int>
