from "base/iostream-clifwrap.h" import *
from "matrix/kaldi-matrix-clifwrap.h" import *
from "hmm/transition-model-clifwrap.h" import *
from "util/const-integer-set-clifwrap.h" import *

from kaldi.matrix._matrix import _matrix_wrapper

from "hmm/posterior-ext.h":
  namespace `kaldi`:
    class `PosteriorWrapper` as Posterior:
     
      @add__init__
      def `PosteriorWrapper` as from_posteriors(self, post: list<list<tuple<int, float>>>)

      @add__init__
      def `PosteriorWrapper` as from_alignment(self, ali: list<int>)

      def `GetPosteriors` as get_posteriors(self) -> list<list<tuple<int, float>>>

      def `Write` as write(self, os: ostream, binary: bool)

      def `Read` as read(self, is: istream, binary: bool)

      def `Scale` as scale(self, scale: float)

      def `Total` as total(self) -> float

      def `SortByPdfs` as sort_by_pdfs(self, tmodel: TransitionModel)

      def `WeightSilence` as weight_silence(self, tmodel: TransitionModel,
                                            silence_set: ConstIntegerSet,
                                            silence_scale: float)

      def `WeightSilenceDistributed` as weight_silence_distributed(self,
        tmodel: TransitionModel, silence_set: ConstIntegerSet, silence_scale: float)

      def `ToMatrix` as to_matrix(self, post_dim: int) -> Matrix:
        
        return _matrix_wrapper(...)

      def `ToPdfMatrix` as to_pdf_matrix(self, model: TransitionModel) -> Matrix:
      
        return _matrix_wrapper(...)

      def `ConvertTransitionsToPdfs` as convert_transitions_to_pdfs(self,
        tmodel: TransitionModel) -> Posterior

      def `ConvertTransitionsToPhones` as convert_transitions_to_phones(self,
        tmodel: TransitionModel) -> Posterior

    def `MergePosteriorWrappers` as merge_posteriors(
      post1: Posterior, post2: Posterior, merge: bool, drop_frames: bool)
      -> (num_frames: int, post_out: Posterior)
