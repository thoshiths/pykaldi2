from "itf/options-itf-clifwrap.h" import *
from "itf/context-dep-itf-clifwrap.h" import *
from "hmm/transition-model-clifwrap.h" import *
from "fstext/lattice-weight-clifwrap.h" import *
from "fstext/vector-fst-clifwrap.h" import *

from kaldi.fstext import StdVectorFst
from kaldi.util import _value_error_on_false

from "hmm/hmm-utils.h":
  namespace `kaldi`:
    class HTransducerConfig:
      
      transition_scale: float
      

      nonterm_phones_offset: int
      

      def `Register` as register(self, opts: OptionsItf)

    # NOTE(Dogan): No need for the following functions in Python.
    # GetHmmAsFsa, GetHmmAsFsaSimple

    def `GetHTransducer` as _get_h_transducer(
      ilabel_info: list<list<int>>, ctx_dep: ContextDependencyInterface,
      trans_model: TransitionModel, config: HTransducerConfig)
      -> (h_transducer: StdVectorFst, disambig_syms_left: list<int>)
      
    def `GetIlabelMapping` as get_ilabel_mapping(
      ilabel_info_old: list<list<int>>, ctx_dep: ContextDependencyInterface,
      trans_model: TransitionModel) -> list<int>

    def `AddSelfLoops` as add_self_loops(
      trans_model: TransitionModel, disambig_syms: list<int>,
      self_loop_scale: float, reorder: bool, check_no_self_loops: bool, fst: StdVectorFst)

    def `AddTransitionProbs` as add_transition_probs(
      trans_model: TransitionModel, disambig_syms: list<int>,
      transition_scale: float, self_loop_scale: float, fst: StdVectorFst)

    def `AddTransitionProbs` as add_transition_probs_lat(
      trans_model: TransitionModel, transition_scale: float,
      self_loop_scale: float, fst: LatticeVectorFst)

    # NOTE(Dogan): No need for the following functions in Python.
    # GetPdfToTransitionIdTransducer, ConvertTransitionIdsToPdfs

    def `SplitToPhones` as split_to_phones(trans_model: TransitionModel, alignment: list<int>)
    -> (success: bool, split_alignment: list<list<int>>)

    def `ConvertPhnxToProns` as convert_phnx_to_prons(
      phnx: list<int>, words: list<int>, word_start_sym: int, word_end_sym: int)
      -> (success: bool, prons: list<list<int>>):
      
      return _value_error_on_false(...)

    # NOTE(Dogan): No need for the following functions in Python.
    # GetRandomAlignmentForPhone, ChangeReorderingOfAlignment
