from "matrix/kaldi-vector-clifwrap.h" import *
from "matrix/kaldi-matrix-clifwrap.h" import *

from kaldi.matrix._matrix import _vector_wrapper

from "feat/resample.h":
  namespace `kaldi`:
    class ArbitraryResample:
      
      def __init__(self, num_samples_in: int, samp_rate_hz: float,
                   filter_cutoff_hz: float, sample_points_secs: Vector, num_zeros: int)

      num_samples_in: int = property(`NumSamplesIn`)
      

      num_samples_out: int = property(`NumSamplesOut`)
      

      def `Resample` as resample(self, input: MatrixBase, output: MatrixBase)
      def `Resample` as resample_vector(self, input: VectorBase, output: VectorBase)

    class LinearResample:
      
      def __init__(self, sample_rate_in_hz: int, samp_rate_out_hz: int,
                   filter_cutoff_hz: float, num_zeros: int)

      def `Resample` as resample(self, input: VectorBase, flush: bool) -> Vector:

        return _vector_wrapper(...)

      def `Reset` as reset(self)

    def `DownsampleWaveForm` as downsample_wave_form(orig_freq: float, wave: VectorBase,
                                                     new_freq: float) -> Vector:

      return _vector_wrapper(...)
