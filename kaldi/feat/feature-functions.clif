from "itf/options-itf-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "matrix/kaldi-matrix-clifwrap.h" import *
from "matrix/matrix-ext.h" import *

from kaldi.matrix._matrix import _matrix_wrapper

from "feat/feature-functions.h":
  namespace `kaldi`:
    def `ComputePowerSpectrum` as compute_power_spectrum(complex_fft: VectorBase)
      
    class DeltaFeaturesOptions:

      order: int

      window: int

      def __init__(self, order: int = default, window: int = default)

      def `Register` as register(self, opts: OptionsItf)

    class DeltaFeatures:
    
      def __init__(self, opts: DeltaFeaturesOptions)

      def `Process` as process(self, input_feats: MatrixBase, frame: int,
                               output_frame: VectorBase)

    class ShiftedDeltaFeaturesOptions:
    
      window: int
     
      num_blocks: int
      
      block_shift: int
      
      def `Register` as register(self, opts: OptionsItf)

    class ShiftedDeltaFeatures:
      
      def __init__(self, opts: ShiftedDeltaFeaturesOptions)

      def `Process` as process(self, input_feats: MatrixBase, frame: int,
                               output_frame: SubVector)

    def `ComputeDeltas` as compute_deltas(delta_opts: DeltaFeaturesOptions,
                                          input_features: MatrixBase) -> Matrix:
      return _matrix_wrapper(...)

    def `ComputeShiftedDeltas` as compute_shift_deltas(
        delta_opts: ShiftedDeltaFeaturesOptions, input_features: MatrixBase) -> Matrix:
    
      return _matrix_wrapper(...)

    def `SpliceFrames` as splice_frames(input_features: MatrixBase, left_context: int,
                                        right_context: int) -> Matrix:
      return _matrix_wrapper(...)

    def `ReverseFrames` as reverse_frames(input_features: MatrixBase) -> Matrix:
      return _matrix_wrapper(...)

    def `InitIdftBases` as init_idft_bases(n_bases: int, dimension: int) -> Matrix:
      return _matrix_wrapper(...)

    class SlidingWindowCmnOptions:

      cmn_window: int
      
      min_window: int

      max_warnings: int

      normalize_variance: bool

      center: bool

      def `Register` as register(self, opts: OptionsItf)

      def `Check` as check(self)

    def `SlidingWindowCmn` as sliding_window_cmn(opts: SlidingWindowCmnOptions,
                                                 input: MatrixBase, output: MatrixBase)
