from "matrix/kaldi-vector-clifwrap.h" import *
from "itf/options-itf-clifwrap.h" import *
from "feat/feature-window-clifwrap.h" import *

from kaldi.matrix._matrix import _vector_wrapper

from "feat/mel-computations.h":
  namespace `kaldi`:
    class MelBanksOptions:
     
      def __init__(self, num_bins: int = default)

      num_bins: int
      

      low_freq: float
     

      high_freq: float
      

      vtln_low: float
      
      vtln_high: float
      
      debug_mel: bool
      

      htk_mode: bool
      

      def `Register` as register(self, opts: OptionsItf)

    class MelBanks:
      
      def __init__(self, opts: MelBanksOptions,
                   frame_opts: FrameExtractionOptions, vtln_warp_factor: float)

      @add__init__
      def `MelBanks` as from_other(self, other: MelBanks)

      @classmethod
      def `InverseMelScale` as inverse_mel_scale(cls, mel_freq: float) -> float

      @classmethod
      def `MelScale` as mel_scale(cls, freq: float) -> float

      @classmethod
      def `VtlnWarpFreq` as vtln_warp_freq(cls,
        vtln_low_cutoff: float, vtln_high_cutoff: float, low_freq: float,
        high_freq: float, vtln_warp_factor: float, freq: float) -> float 

      @classmethod
      def `VtlnWarpMelFreq` as vtln_warp_mel_freq(cls,
        vtln_low_cutoff: float, vtln_high_cutoff: float, low_freq: float,
        high_freq: float, vtln_warp_factor: float, mel_freq: float) -> float

      def `Compute` as compute(self, fft_energies: VectorBase, mel_energies_out: VectorBase)

      def `NumBins` as num_bins(self) -> int 

      def `GetCenterFreqs` as get_center_freqs(self) -> Vector:
        return _vector_wrapper(...)

    def `ComputeLifterCoeffs` as compute_lifter_coeffs(Q: float, coeffs: VectorBase)

    def `ComputeLpc` as compute_lpc(autocorr_in: VectorBase, lpc_out: Vector) -> float
      
    def `GetEqualLoudnessVector` as get_equal_loudness_vector(mel_banks: MelBanks) -> Vector:
      return _vector_wrapper(...)
