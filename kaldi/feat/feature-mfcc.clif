from "matrix/kaldi-vector-clifwrap.h" import *
from "matrix/kaldi-matrix-clifwrap.h" import *
from "itf/options-itf-clifwrap.h" import *
from "feat/feature-window-clifwrap.h" import *
from "feat/mel-computations-clifwrap.h" import *

from kaldi.matrix._matrix import _matrix_wrapper

from "feat/feature-mfcc.h":
  namespace `kaldi`:
    class MfccOptions:
      
      frame_opts: FrameExtractionOptions
      

      mel_opts: MelBanksOptions
      

      num_ceps: int
      

      use_energy: bool
      
      energy_floor: float
      

      raw_energy: bool
      

      cepstral_lifter: float
      
      htk_compat: bool
      

      def `Register` as register(self, opts: OptionsItf)
       
    class MfccComputer:
     
      def __init__(self, opts: MfccOptions)

      @add__init__
      def `MfccComputer` as from_other(self, other: MfccComputer)
        

      def `GetFrameOptions` as get_frame_options(self) -> FrameExtractionOptions
        
      def `Dim` as dim(self) -> int

      def `NeedRawLogEnergy` as need_raw_log_energy(self) -> bool

      def `Compute` as compute(self, signal_log_energy: float, vtln_warp: float,
                               signal_frame: VectorBase, feature: VectorBase)

       
    class `OfflineFeatureTpl<MfccComputer>` as Mfcc:
      
      def __init__(self, opts: MfccOptions)

      @add__init__
      def `MfccOfflineFeatureTpl` as from_other(self, other: Mfcc)

      def `Compute` as compute(self, wave: VectorBase, vtln_warp: float) -> Matrix:
        return _matrix_wrapper(...)

      def `ComputeFeatures` as compute_features(self,
          wave: VectorBase, sample_freq: float, vtln_warp: float) -> Matrix:
        return _matrix_wrapper(...)

      def `Dim` as dim(self) -> int