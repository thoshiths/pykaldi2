from "base/iostream-clifwrap.h" import *
from "matrix/kaldi-matrix-clifwrap.h" import *

from kaldi.matrix._matrix import _matrix_wrapper

from "feat/wave-reader.h":
  namespace `kaldi`:
    const `kWaveSampleMax` as WAVE_SAMPLE_MAX: float

    class WaveInfo:
      

      is_streamed: bool = property(`IsStreamed`)
      

      samp_freq: float = property(`SampFreq`)
      

      sample_count: int = property(`SampleCount`)
      

      duration: float = property(`Duration`)
      

      num_channels: int = property(`NumChannels`)
      

      block_align: int = property(`BlockAlign`)
      

      data_bytes: int = property(`DataBytes`)
      

      reverse_bytes: bool = property(`ReverseBytes`)
       

      def `Read` as read(self, is: istream) -> self

    class WaveData:
      

      @add__init__
      def `WaveData` as from_data(self, samp_freq:float, data:MatrixBase):
        

      def `Read` as read(self, is: istream) -> self

      def `Write` as write(self, os: ostream) -> self 

      def `Data` as data(self) -> Matrix:
        
        return _matrix_wrapper(...)

      samp_freq: float = property(`SampFreq`)
      

      duration: float = property(`Duration`)
      

      def `CopyFrom` as copy_from(self, other:WaveData) -> self

      def `Clear` as clear(self) -> self

      def `Swap` as swap(self, other:WaveData) -> self
