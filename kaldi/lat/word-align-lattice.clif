from "base/iostream-clifwrap.h" import *
from "itf/options-itf-clifwrap.h" import *
from "fstext/lattice-weight-clifwrap.h" import *
from "fstext/vector-fst-clifwrap.h" import *
from "hmm/transition-model-clifwrap.h" import *

from "lat/word-align-lattice.h":
  namespace `kaldi`:
    class WordBoundaryInfoNewOpts:
      
      silence_label: int
      
      partial_word_label: int
      
      reorder: bool
      

      def `Register` as register(self, opts: OptionsItf)

    class WordBoundaryInfo:
      
      def __init__(self, opts: WordBoundaryInfoNewOpts)

      @add__init__
      def `WordBoundaryInfo` as from_file(
        self, opts: WordBoundaryInfoNewOpts, word_boundary_file: str)

      def `Init` as init(self, is: istream)

      enum PhoneType with:
        `kNoPhone` as NO_PHONE
        `kWordBeginPhone` as WORD_BEGIN_PHONE
        `kWordEndPhone` as WORD_END_PHONE
        `kWordBeginAndEndPhone` as WORD_BEGIN_AND_END_PHONE
        `kWordInternalPhone` as WORD_INTERNAL_PHONE
        `kNonWordPhone` as NON_WORD_PHONE

      def `TypeOfPhone` as type_of_phone(self, p: int) -> PhoneType 

      phone_to_type: list<PhoneType>
      
      silence_label: int
      
      partial_word_label: int
      
      reorder: bool
      


    def `WordAlignLattice` as _word_align_lattice(
      lat: CompactLatticeVectorFst, tmodel: TransitionModel,
      info: WordBoundaryInfo, max_states: int)
      -> (success: bool, lat_out: CompactLatticeVectorFst)


    def `TestWordAlignedLattice` as test_word_aligned_lattice(
      lat: CompactLatticeVectorFst, tmodel: TransitionModel,
      info: WordBoundaryInfo, aligned_lat: CompactLatticeVectorFst)
