from "base/iostream-clifwrap.h" import *
from "matrix/matrix-common-clifwrap.h" import *
from "matrix/sparse-matrix-clifwrap.h" import *
from "cudamatrix/cu-matrixdim-clifwrap.h" import *
from "cudamatrix/cu-array-clifwrap.h" import *
from "cudamatrix/cu-vector-clifwrap.h" import *
from "cudamatrix/cu-matrix-clifwrap.h" import *

from "cudamatrix/cu-sparse-matrix.h":
  namespace `kaldi`:

    class `CuSparseMatrix<float>` as CuSparseMatrix:

      def `NumRows` as __len__(self) -> int

      num_rows: int = property(`NumRows`)
      

      num_cols: int = property(`NumCols`)
     

      def `NumElements` as num_elements(self) -> int
      def `Sum` as sum(self) -> float

      def `FrobeniusNorm` as frobenius_norm(self) -> float

      def `CopyToMat` as copy_to_mat(self, dest: CuMatrixBase, trans: MatrixTransposeType = default)

      def `CopyElementsToVec` as copy_elements_to_vec(self, vec: CuVectorBase)

      def `CopyFromSmat` as copy_from_smat_(self, smat: CuSparseMatrix,
                                            trans: MatrixTransposeType = default) -> self
      def `SelectRows` as select_rows_(self, row_indexes: CuArray, smat_other: CuSparseMatrix) -> self

      def `CopyToSmat` as copy_to_smat(self, smat: SparseMatrix)

      def `Swap` as swap_with_cpu_(self, other: SparseMatrix) ->  self

      def `Swap` as swap_(self, other: CuSparseMatrix) ->  self

      @add__init__
      def `CuSparseMatrix` as from_cpu(self, smat: SparseMatrix)

      @add__init__
      def `CuSparseMatrix` as from_other(self, smat: CuSparseMatrix,
                                         trans: MatrixTransposeType = default)

      @add__init__
      def `CuSparseMatrix` as from_indexes(self, indexes: CuArray, dim: int,
                                           trans: MatrixTransposeType = default)

      @add__init__
      def `CuSparseMatrix` as from_indexes_and_weights(
        self, indexes: CuArray, weights: CuVectorBase, dim: int,
        trans: MatrixTransposeType = default)

      def `SetRandn` as set_randn_(self, zero_prob: float) -> self

      def `Write` as write(self, os: ostream, binary: bool)

      def `Read` as read_(self, is: istream, binary: bool) -> self

    def `TraceMatSmat` as trace_mat_smat(A: CuMatrixBase, B: CuSparseMatrix,
                                         trans: MatrixTransposeType = default) -> float