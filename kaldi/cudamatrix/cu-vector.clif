from "base/iostream-clifwrap.h" import *
from "matrix/matrix-common-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "matrix/kaldi-matrix-clifwrap.h" import *

from "cudamatrix/cu-vector.h":
  namespace `kaldi`:
    class `CuVectorBase<float>` as CuVectorBase:

      def `Dim` as dim(self) -> int
      def `Dim` as __len__(self) -> int

      def `CopyFromVec` as copy_from_cu_vec(self, src: CuVectorBase)

      def `CopyFromVec` as copy_from_vec(self, src: VectorBase)
      def `CopyToVec` as copy_to_vec(self, dst: VectorBase)

      # def `CopyRowsFromMat` as CopyRowsFromCuMat(self, M: CuMatrixBase)

      def `CopyRowsFromMat` as copy_rows_from_mat(self, M: MatrixBase)

      def `SetZero` as set_zero(self)
      def `Set` as set(self, value: float)

      def `Add` as add(self, value: float)

      def `Scale` as scale(self, value: float)

      def `AddVec` as add_vec(self, alpha: float, vec: CuVectorBase, beta: float = default)

      def `ApproxEqual` as approx_equal(self, other: CuVectorBase, tol: float = default) -> bool
      def `InvertElements` as invert_elements(self)

      def `ApplySoftMax` as apply_softmax(self)

      def `ApplyExp` as apply_exp(self)

      def `ApplyLog` as apply_log(self)

      def `ApplyFloor` as apply_floor(self, floor_val: float) -> int

      def `ApplyFloor` as apply_floor_no_count(self, floor_val: float)

      def `ApplyCeiling` as apply_ceiling(self, ceiling_val: float) -> int

      def `ApplyCeiling` as apply_ceiling_no_count(self, ceiling_val: float)

      def `ApplyPow` as apply_pow(self, power: float)

      def `Sum` as sum(self) -> Float
      
      def `SetRandn` as set_randn(self)

      def `SetRandUniform` as set_rand_uniform(self)

      def `AddVecVec` as add_vec_vec(self, alpha: float, v: CuVectorBase, r: CuVectorBase,
                    beta: float)

      def `Norm` as norm(self, p: float) -> float

      @sequential
      def `operator()` as __getitem__(self, index: int) -> float

  

      def `Max` as max(self) -> float

      def `Min` as min(self) -> float

      def `ReplaceValue` as replace_value(self, orig: float, changed: float)

      def `MulElements` as mul_elements(self, v: CuVectorBase)

    class `CuVector<float>` as CuVector(CuVectorBase):
      @add__init__
      def `CuVector` as from_size(self, dim: int,
                                  resize_type: MatrixResizeType = default)


      @add__init__
      def `CuVector` as from_base(self, v: CuVectorBase)

      @add__init__
      def `CuVector` as from_vector(self, v: VectorBase)

      def `Resize` as resize(self, dim: int, resize_type: MatrixResizeType = default)

      def `Read` as read(self, is: istream, binary: bool)

      def `Write` as write(self, os: ostream, binary: bool)

      def `Swap` as swap(self, vec: Vector)

    class `CuSubVector<float>` as CuSubVector(CuVectorBase):
      def __init__(self, t: CuVectorBase, origin: int, length: int)

      @add__init__
      def `CuSubVector` as from_other(self, other: CuSubVector)

      # CuSubVector(const CuMatrixBase<Real> &matrix, MatrixIndexT row)

    def `ApproxEqual` as approx_equal_cu_vector(a: CuVectorBase, b: CuVectorBase,
                                             tol: `float` as float = default)
        -> bool

    def `AssertEqual` as assert_equal_cu_vector(a: CuVectorBase, b: CuVectorBase,
                                             tol: `float` as float = default)

    class `CuVectorBase<double>` as CuDoubleVectorBase:

      def `Dim` as dim(self) -> int

      def `Dim` as __len__(self) -> int

      def `CopyFromVec` as copy_from_cu_vec(self, src: CuDoubleVectorBase)

      def `CopyFromVec` as copy_from_vec(self, src: DoubleVectorBase)

      def `CopyToVec` as copy_to_vec(self, dst: DoubleVectorBase)

      # def `CopyRowsFromMat` as CopyRowsFromCuMat(self, M: CuDoubleMatrixBase)

      def `CopyRowsFromMat` as copy_rows_from_mat(self, M: DoubleMatrixBase)

      def `SetZero` as set_zero(self)

      def `Set` as set(self, value: float)

      def `Add` as add(self, value: float)

      def `Scale` as scale(self, value: float)

      def `AddVec` as add_vec(self, alpha: float, vec: CuDoubleVectorBase, beta: float = default)

      def `ApproxEqual` as approx_equal(self, other: CuDoubleVectorBase, tol: float = default) -> bool

      def `InvertElements` as invert_elements(self)

      def `ApplySoftMax` as apply_softmax(self)

      def `ApplyExp` as apply_exp(self)

      def `ApplyLog` as apply_log(self)

      def `ApplyFloor` as apply_floor(self, floor_val: float) -> int

      def `ApplyFloor` as apply_floor_no_count(self, floor_val: float)

      def `ApplyCeiling` as apply_ceiling(self, ceiling_val: float) -> int

      def `ApplyCeiling` as apply_ceiling_no_count(self, ceiling_val: float)

      def `ApplyPow` as apply_pow(self, power: float)

      def `Sum` as sum(self) -> float

      def `SetRandn` as set_randn(self)

      def `SetRandUniform` as set_rand_uniform(self)

      def `AddVecVec` as add_vec_vec(
        self, alpha: float, v: CuDoubleVectorBase, r: CuDoubleVectorBase, beta: float)
     
      def `Norm` as norm(self, p: float) -> float

      @sequential
      def `operator()` as __getitem__(self, index: int) -> float

      def `Max` as max(self) -> float

      def `Min` as min(self) -> float

      def `ReplaceValue` as replace_value(self, orig: float, changed: float)

      def `MulElements` as mul_elements(self, v: CuDoubleVectorBase)

    class `CuVector<double>` as CuDoubleVector(CuDoubleVectorBase):
      @add__init__
      def `CuVector` as from_size(self, dim: int,
                                      resize_type: MatrixResizeType = default)

      @add__init__
      def `CuVector` as from_base(self, v: CuDoubleVectorBase)

      @add__init__
      def `CuVector` as from_vector(self, v: DoubleVectorBase)

      def `Resize` as resize(self, dim: int, resize_type: MatrixResizeType = default)

      def `Read` as read(self, is: istream, binary: bool)

      def `Write` as write(self, os: ostream, binary: bool)

      def `Swap` as swap(self, vec: DoubleVector)

    class `CuSubVector<double>` as CuDoubleSubVector(CuDoubleVectorBase):
      def __init__(self, t: CuDoubleVectorBase, origin: int, length: int)

      @add__init__
      def `CuSubVector` as from_other(self, other: CuDoubleSubVector)

    def `ApproxEqual` as approx_equal_cu_double_vector(
        a: CuDoubleVectorBase, b: CuDoubleVectorBase, tol: float = default) -> bool

    def `AssertEqual` as assert_equal_cu_double_vector(
        a: CuDoubleVectorBase, b: CuDoubleVectorBase, tol: float = default)
