from "base/iostream-clifwrap.h" import *
from "matrix/matrix-common-clifwrap.h" import *
from "cudamatrix/cu-matrixdim-clifwrap.h" import *

from "cudamatrix/cu-array.h":
  namespace `kaldi`:
    class `CuArray<int>` as CuArray:
      @add__init__
      def `CuArray` as from_size(self, dim: int,
                                     resize_type: MatrixResizeType = default)

      @add__init__
      def `CuArray` as from_vector(self, src: list<int>)

      @add__init__
      def `CuArray` as from_other(self, src: CuArray)

      def `Dim` as dim(self) -> int

      def `Dim` as __len__(self) -> int

      def `Resize` as resize(self, dim: int, resize_type: MatrixResizeType = default)

      def `Destroy` as destroy(self)

      def `CopyFromVec` as copy_from_vec(self, src: list<int>)

      def `CopyFromArray` as copy_from_array(self, src: CuArray)

      def `CopyToVec` as copy_to_vec(self) -> list<int>

      def `SetZero` as set_zero(self)

      def `Set` as set(self, value: int)

      def `Add` as add(self, value: int)

      def `Min` as min(self) -> int

      def `Max` as max(self) -> int

      def `Read` as read(self, is: istream, binary: bool)

      def `Write` as write(self, os: ostream, binary: bool)


    class `CuArray<Int32Pair>` as CuIntPairArray:
      @add__init__
      def `CuArray` as from_size(self, dim: int,
                                     resize_type: MatrixResizeType = default)

      @add__init__
      def `CuArray` as from_vector(self, src: list<IntPair>)

      @add__init__
      def `CuArray` as from_other(self, src: CuIntPairArray)

      def `Dim` as dim(self) -> int

      def `Dim` as __len__(self) -> int

      def `Resize` as resize(self, dim: int, resize_type: MatrixResizeType = default)

      def `Destroy` as destroy(self)

      def `CopyFromVec` as copy_from_vec(self, src: list<IntPair>)

      def `CopyFromArray` as copy_from_array(self, src: CuIntPairArray)

      def `CopyToVec` as copy_to_vec(self) -> list<IntPair>

      def `SetZero` as set_zero(self)

      def `Set` as set(self, value: IntPair)

      def `Add` as add(self, value: IntPair)

    class `CuArray<float*>` as CuFloatPtrArray:
      @add__init__
      def `CuArray` as from_size(self, dim: int,
                                     resize_type: MatrixResizeType = default)


      @add__init__
      def `CuArray` as from_other(self, src: CuFloatPtrArray)

      def `Dim` as dim(self) -> int
      
      def `Dim` as __len__(self) -> int

      def `Resize` as resize(self, dim: int, resize_type: MatrixResizeType = default)

      def `Destroy` as destroy(self)

      # def CopyFromVec(self, src: list<`float` as float>)

      def `CopyFromArray` as copy_from_array(self, src: CuFloatPtrArray)

    

      def `SetZero` as set_zero(self)

      def `Min` as min(self) -> `float` as float

      def `Max` as max(self) -> `float` as float

    class `CuArray<double*>` as CuDoublePtrArray:
      @add__init__
      def `CuArray` as from_size(self, dim: int,
                                 resize_type: MatrixResizeType = default)

      # @add__init__
      # def `CuArray` as from_vector(self, src: list<float>)

      @add__init__
      def `CuArray` as from_other(self, src: CuDoublePtrArray)

      def `Dim` as dim(self) -> int

      def `Dim` as __len__(self) -> int

      def `Resize` as resize(self, dim: int, resize_type: MatrixResizeType = default)

      def `Destroy` as destroy(self)

      # def `CopyFromVec` as copy_from_vec(self, src: list<float>)

      def `CopyFromArray` as copy_from_array(self, src: CuDoublePtrArray)

      # def `CopyToVec` as copy_to_vec(self) -> list<float>

      def `SetZero` as set_zero(self)

      def `Min` as min(self) -> float

      def `Max` as max(self) -> float