from "base/iostream-clifwrap.h" import *
from "fstext/float-weight-clifwrap.h" import *
from "fstext/lattice-weight-clifwrap.h" import *
from "fstext/lexicographic-weight-clifwrap.h" import *
from "fstext/arc-clifwrap.h" import *
from "fstext/symbol-table-clifwrap.h" import *

from "fst/fst.h":
  namespace `fst`:
    const `kNoStateId` as NO_STATE_ID: int
    const `kNoLabel` as NO_LABEL: int

    class FstHeader:
      
      # FIXME(Dogan):
      # CLIF complains about this enum.
      #
      # enum Flags

      def `FstType` as fst_type(self) -> str

      def `ArcType` as arc_type(self) -> str

      def `Version` as version(self) -> int

      def `GetFlags` as get_flags(self) -> int

      def `Properties` as properties(self) -> int

      def `Start` as start(self) -> int

      def `NumStates` as num_states(self) -> int

      def `NumArcs` as num_arcs(self) -> int

      def `SetFstType` as set_fst_type(self, type: str)

      def `SetArcType` as set_arc_type(self, type: str)

      def `SetVersion` as set_version(self, version: int)

      def `SetFlags` as set_flags(self, flags: int)

      def `SetProperties` as set_properties(self, properties: int)

      def `SetStart` as set_start(self, start: int)

      def `SetNumStates` as set_num_states(self, numstates: int)

      def `SetNumArcs` as set_num_arcs(self, numarcs: int)

      def `Read` as read(self, strm: istream, source: str,
                         rewind: bool = default) -> bool

      def `Write` as write(self, strm: ostream, source: str) -> bool

      def `DebugString` as debug_string(self) -> str


    class FstReadOptions:
      
      enum FileReadMode

      source: str
      
     
      mode: FileReadMode
      
      read_isymbols: bool
      
      read_osymbols: bool
      

      def __init__(self, source: str = default, header: FstHeader = default,
                   isymbols: SymbolTable = default,
                   osymbols: SymbolTable = default)

      @classmethod
      def `ReadMode` as read_mode(cls, mode: str) -> FileReadMode

      def `DebugString` as debug_string(self) -> str


    class FstWriteOptions:
      
      source: str
      
      write_header: bool
      
      write_isymbols: bool
      
      write_osymbols: bool
      
      align: bool
      
      stream_write: bool
      

      def __init__(self, source: str = default, write_header: bool = default,
                   write_isymbols: bool = default,
                   write_osymbols: bool = default, align: bool = default,
                   stream_write: bool = default)


    # StdArc

    class `Fst<StdArc>` as StdFst:

      def `Start` as _start(self) -> int

      def `Final` as _final(self, state: int) -> TropicalWeight

      def `NumArcs` as _num_arcs(self, state: int) -> int

      def `NumInputEpsilons` as _num_input_epsilons(self, state: int) -> int

      def `NumOutputEpsilons` as _num_output_epsilons(self, state: int) -> int

      def `Properties` as _properties(self, mask: int, test: bool) -> int

      def `Type` as _type(self) -> str

      def `InputSymbols` as _input_symbols(self) -> SymbolTable

      def `OutputSymbols` as _output_symbols(self) -> SymbolTable

      # NOTE: These methods are wrapped in concrete child classes.
      #
      # def `Copy` as _copy(self, safe: bool = default) -> StdFst
      #
      # @classmethod
      # def `Read` as _read(cls, filename: str) -> StdFst
      #
      # def `Write` as _write(self, filename: str) -> bool

    #LogArc

    class `Fst<LogArc>` as LogFst:

      def `Start` as _start(self) -> int

      def `Final` as _final(self, state: int) -> LogWeight

      def `NumArcs` as _num_arcs(self, state: int) -> int

      def `NumInputEpsilons` as _num_input_epsilons(self, state: int) -> int

      def `NumOutputEpsilons` as _num_output_epsilons(self, state: int) -> int

      def `Properties` as _properties(self, mask: int, test: bool) -> int

      def `Type` as _type(self) -> str

      def `InputSymbols` as _input_symbols(self) -> SymbolTable

      def `OutputSymbols` as _output_symbols(self) -> SymbolTable

      # NOTE: These methods are wrapped in concrete child classes.
      #
      # def `Copy` as _copy(self, safe: bool = default) -> LogFst
      #
      # @classmethod
      # def `Read` as _read(cls, filename: str) -> LogFst
      #
      # def `Write` as _write(self, filename: str) -> bool

    # LatticeArc

    class `Fst<ArcTpl<LatticeWeightTpl<float>>>` as LatticeFst:

      def `Start` as _start(self) -> int

      def `Final` as _final(self, state: int) -> LatticeWeight

      def `NumArcs` as _num_arcs(self, state: int) -> int

      def `NumInputEpsilons` as _num_input_epsilons(self, state: int) -> int

      def `NumOutputEpsilons` as _num_output_epsilons(self, state: int) -> int

      def `Properties` as _properties(self, mask: int, test: bool) -> int

      def `Type` as _type(self) -> str

      def `InputSymbols` as _input_symbols(self) -> SymbolTable

      def `OutputSymbols` as _output_symbols(self) -> SymbolTable

      # NOTE: These methods are wrapped in concrete child classes.
      #
      # def `Copy` as _copy(self, safe: bool = default) -> LatticeFst
      #
      # @classmethod
      # def `Read` as _read(cls, filename: str) -> LatticeFst
      #
      # def `Write` as _write(self, filename: str) -> bool

    # CompactLatticeArc

    class `Fst<ArcTpl<CompactLatticeWeightTpl<LatticeWeightTpl<float>,int32>>>` as CompactLatticeFst:

      def `Start` as _start(self) -> int

      def `Final` as _final(self, state: int) -> CompactLatticeWeight

      def `NumArcs` as _num_arcs(self, state: int) -> int

      def `NumInputEpsilons` as _num_input_epsilons(self, state: int) -> int

      def `NumOutputEpsilons` as _num_output_epsilons(self, state: int) -> int

      def `Properties` as _properties(self, mask: int, test: bool) -> int

      def `Type` as _type(self) -> str

      def `InputSymbols` as _input_symbols(self) -> SymbolTable

      def `OutputSymbols` as _output_symbols(self) -> SymbolTable

      # NOTE: These methods are wrapped in concrete child classes.
      #
      # def `Copy` as _copy(self, safe: bool = default) -> CompactLatticeFst
      #
      # @classmethod
      # def `Read` as _read(cls, filename: str) -> CompactLatticeFst
      #
      # def `Write` as _write(self, filename: str) -> bool

    # KwsIndexArc

    class `Fst<ArcTpl<LexicographicWeight<TropicalWeight, LexicographicWeight<TropicalWeight, TropicalWeight>>>>`
        as KwsIndexFst:

      def `Start` as _start(self) -> int

      def `Final` as _final(self, state: int) -> KwsIndexWeight

      def `NumArcs` as _num_arcs(self, state: int) -> int

      def `NumInputEpsilons` as _num_input_epsilons(self, state: int) -> int

      def `NumOutputEpsilons` as _num_output_epsilons(self, state: int) -> int

      def `Properties` as _properties(self, mask: int, test: bool) -> int

      def `Type` as _type(self) -> str

      def `InputSymbols` as _input_symbols(self) -> SymbolTable

      def `OutputSymbols` as _output_symbols(self) -> SymbolTable

      # NOTE: These methods are wrapped in concrete child classes.
      #
      # def `Copy` as _copy(self, safe: bool = default) -> KwsIndexFst
      #
      # @classmethod
      # def `Read` as _read(cls, filename: str) -> KwsIndexFst
      #
      # def `Write` as _write(self, filename: str) -> bool
