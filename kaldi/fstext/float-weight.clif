from "fstext/weight-clifwrap.h" import *

from "fstext/float-weight-ext.h":
  namespace `fst`:
    class `FloatLimits<float>` as FloatLimits:
      
      @classmethod
      def `PosInfinity` as pos_infinity(cls) -> float

      @classmethod
      def `NegInfinity` as neg_infinity(cls) -> float

      @classmethod
      def `NumberBad` as number_bad(cls) -> float

    class `FloatWeightTpl<float>` as FloatWeight:
      
      @add__init__
      def `FloatWeightTpl` as from_float(self, f: float)
      @add__init__
      def `FloatWeightTpl` as from_other(self, weight: FloatWeight)

      def `Hash` as hash(self) -> int

      value: `float` as float = property(`Value`)
      

      def __eq__(self, other: FloatWeight) -> bool
      def __ne__(self, other: FloatWeight) -> bool

    def `ApproxEqual` as approx_equal_float_weight(w1: FloatWeight, w2: FloatWeight,
                                                   delta: float = default) -> bool

    class `TropicalWeightTpl<float>` as TropicalWeight(FloatWeight):
      

      @add__init__
      def `TropicalWeightTpl` as from_float(self, f: float)

      @add__init__
      def `TropicalWeightTpl` as from_other(self, weight: TropicalWeight)

      @classmethod
      def `Zero` as zero(cls) -> TropicalWeight

      @classmethod
      def `One` as one(cls) -> TropicalWeight

      @classmethod
      def `NoWeight` as no_weight(cls) -> TropicalWeight

      @classmethod
      def `Type` as type(cls) -> str

      @classmethod
      def `Properties` as properties(cls) -> int

      def `Member` as member(self) -> bool

      def `Quantize` as quantize(self, delta: float = default) -> TropicalWeight

      def `Reverse` as reverse(self) -> TropicalWeight

    def `Plus` as plus_tropical_weight(w1: TropicalWeight,
                                       w2: TropicalWeight) -> TropicalWeight

    def `Times` as times_tropical_weight(w1: TropicalWeight,
                                         w2: TropicalWeight) -> TropicalWeight

    def `Divide` as divide_tropical_weight(w1: TropicalWeight, w2: TropicalWeight,
                                           typ: DivideType = default) -> TropicalWeight

    def `Power` as power_tropical_weight(weight: TropicalWeight,
                                         scalar: `float` as float) -> TropicalWeight

    class `LogWeightTpl<float>` as LogWeight(FloatWeight):
      

      @add__init__
      def `LogWeightTpl` as from_float(self, f: float)

      @add__init__
      def `LogWeightTpl` as from_other(self, weight: LogWeight)

      @classmethod
      def `Zero` as zero(cls) -> LogWeight

      @classmethod
      def `One` as one(cls) -> LogWeight

      @classmethod
      def `NoWeight` as no_weight(cls) -> LogWeight

      @classmethod
      def `Type` as type(cls) -> str

      @classmethod
      def `Properties` as properties(cls) -> int

      def `Member` as member(self) -> bool

      def `Quantize` as quantize(self, delta: float = default) -> LogWeight

      def `Reverse` as reverse(self) -> LogWeight

    def `Plus` as plus_log_weight(w1: LogWeight, w2: LogWeight) -> LogWeight

    def `Times` as times_log_weight(w1: LogWeight, w2: LogWeight) -> LogWeight

    def `Divide` as divide_log_weight(w1: LogWeight, w2: LogWeight, typ: DivideType = default) -> LogWeight

    def `Power` as power_log_weight(weight: LogWeight, scalar: `float` as float) -> LogWeight

    def `GetLogToTropicalConverter` as get_log_to_tropical_converter() -> (w: LogWeight) -> TropicalWeight

    def `GetTropicalToLogConverter` as get_tropical_to_log_converter() -> (w: TropicalWeight) -> LogWeight

    # class `WeightConvert<LogWeight, TropicalWeight>` as ConvertLogToTropical:
    #   def __call__(self, w: LogWeight) -> TropicalWeight

    # class `WeightConvert<TropicalWeight, LogWeight>` as ConvertTropicalToLog:
    #   def __call__(self, w: TropicalWeight) -> LogWeight
