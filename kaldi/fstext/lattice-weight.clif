
from "fstext/weight-clifwrap.h" import *
from "fstext/float-weight-clifwrap.h" import *

from "fstext/lattice-weight.h":
  namespace `fst`:
    class `LatticeWeightTpl<float>` as LatticeWeight:
      

      @add__init__
      def `LatticeWeightTpl` as from_pair(self, a: float, b: float)

      @add__init__
      def `LatticeWeightTpl` as from_other(self, other: LatticeWeight)

      def `Hash` as hash(self) -> int

      value1: `float` as float = property(`Value1`, `SetValue1`)
      

      value2: `float` as float = property(`Value2`, `SetValue2`)
      

      def __eq__(self, other: LatticeWeight) -> bool
      def __ne__(self, other: LatticeWeight) -> bool

      @classmethod
      def `Zero` as zero(cls) -> LatticeWeight

      @classmethod
      def `One` as one(cls) -> LatticeWeight

      @classmethod
      def `NoWeight` as no_weight(cls) -> LatticeWeight

      @classmethod
      def `Type` as type(cls) -> str

      @classmethod
      def `Properties` as properties(cls) -> int

      def `Member` as member(self) -> bool

      def `Quantize` as quantize(self, delta: float = default) -> LatticeWeight

      def `Reverse` as reverse(self) -> LatticeWeight

    def `ScaleTupleWeight` as scale_lattice_weight(
        w: LatticeWeight, scale: list<list<float>>) -> LatticeWeight

    def `Compare` as compare_lattice_weight(w1: LatticeWeight,
                                            w2: LatticeWeight) -> int

    class `NaturalLess<LatticeWeightTpl<float>>` as LatticeNaturalLess:
      
      def __call__(self, w1: LatticeWeight, w2: LatticeWeight) -> bool

    def `Plus` as plus_lattice_weight(w1: LatticeWeight, w2: LatticeWeight) -> LatticeWeight

    def `Times` as times_lattice_weight(w1: LatticeWeight, w2: LatticeWeight) -> LatticeWeight

    def `Divide` as divide_lattice_weight(w1: LatticeWeight, w2: LatticeWeight, typ: DivideType = default) -> LatticeWeight

    def `ApproxEqual` as approx_equal_lattice_weight(w1: LatticeWeight, w2: LatticeWeight, delta: float = default) -> bool

    class `CompactLatticeWeightTpl<LatticeWeightTpl<float>,int32>` as CompactLatticeWeight:
      

      @add__init__
      def `CompactLatticeWeightTpl` as from_pair(self, w: LatticeWeight, s: list<int>)

      @add__init__
      def `CompactLatticeWeightTpl` as from_other(self, other: CompactLatticeWeight)

      def `Hash` as hash(self) -> int

      weight: LatticeWeight = property(`Weight`, `SetWeight`)
      

      string: list<int> = property(`String`, `SetString`)
      

      def __eq__(self, other: CompactLatticeWeight) -> bool
      def __ne__(self, other: CompactLatticeWeight) -> bool

      @classmethod
      def `Zero` as zero(cls) -> CompactLatticeWeight

      @classmethod
      def `One` as one(cls) -> CompactLatticeWeight

      @classmethod
      def `NoWeight` as no_weight(cls) -> CompactLatticeWeight

      @classmethod
      def `Type` as type(cls) -> str

      @classmethod
      def `Properties` as properties(cls) -> int

      @classmethod
      def `GetIntSizeString` as get_int_size_string(cls) -> str

      def `Member` as member(self) -> bool

      def `Quantize` as quantize(self, delta: float = default) -> CompactLatticeWeight

      def `Reverse` as reverse(self) -> CompactLatticeWeight

    def `ScaleTupleWeight` as scale_compact_lattice_weight(
        w: CompactLatticeWeight, scale: list<list<float>>) -> CompactLatticeWeight

    def `Compare` as compare_compact_lattice_weight(w1: CompactLatticeWeight,
                                                    w2: CompactLatticeWeight) -> int

    class `NaturalLess<CompactLatticeWeightTpl<LatticeWeightTpl<float>,int32>>` as CompactLatticeNaturalLess:
      
      def __call__(self, w1: CompactLatticeWeight, w2: CompactLatticeWeight) -> bool

    def `Plus` as plus_compact_lattice_weight(
        w1: CompactLatticeWeight, w2: CompactLatticeWeight) -> CompactLatticeWeight

    def `Times` as times_compact_lattice_weight(
        w1: CompactLatticeWeight,w2: CompactLatticeWeight) -> CompactLatticeWeight

    def `Divide` as divide_compact_lattice_weight(
        w1: CompactLatticeWeight, w2: CompactLatticeWeight, typ: DivideType = default) -> CompactLatticeWeight

    def `ApproxEqual` as approx_equal_compact_lattice_weight(
        w1: CompactLatticeWeight, w2: CompactLatticeWeight, delta: float = default) -> bool

    def `ConvertLatticeWeight` as lattice_weight_to_tropical(w_in: LatticeWeight) -> TropicalWeight

    def `ConvertToCost` as lattice_weight_to_cost(w: LatticeWeight) -> float

    def `ConvertToCost` as compact_lattice_weight_to_cost(w: CompactLatticeWeight) -> float

    def `ConvertToCost` as tropical_weight_to_cost(w: TropicalWeight) -> float
