from "fst/symbol-table.h":
  namespace `fst`:

    const `kNoSymbol` as NO_SYMBOL: int

    class SymbolTableTextOptions:
      
      allow_negative_labels: bool
      

      fst_field_separator: str
      

      def __init__(self, allow_negative_labels: bool = default)

    class SymbolTable:

      @add__init__
      def `SymbolTable` as from_name(self, name: str)

      @classmethod
      def `ReadText` as read_text(cls, filename: str,
                                  opts: SymbolTableTextOptions = default) -> SymbolTable

      @classmethod
      def `Read` as read(cls, filename: str) -> SymbolTable 
      def `Copy` as copy(self) -> SymbolTable

      def `AddSymbol` as add_pair(self, symbol: str, key: int) -> int

      def `AddSymbol` as add_symbol(self, symbol: str) -> int
      def `AddTable` as add_table(self, table: SymbolTable)
      def `RemoveSymbol` as remove_symbol(self, key: int)

      def `Name` as name(self) -> str

      def `SetName` as set_name(self, new_name: str)

      def `CheckSum` as checksum(self) -> str

      def `LabeledCheckSum` as labeled_checksum(self) -> str

      def `Write` as write(self, filename: str) -> bool 

      def `WriteText` as write_text(self, filename: str) -> bool 

      def `Find` as find_symbol(self, key: int) -> str 

      def `Find` as find_index(self, symbol: str) -> int 

      def `Member` as member_index(self, key: int) -> bool 

      def `Member` as member_symbol(self, symbol: str) -> bool 

      def `AvailableKey` as available_key(self) -> int

      def `NumSymbols` as num_symbols(self) -> int

      def `GetNthKey` as get_nth_key(self, pos: int) -> int 


    class SymbolTableIterator:
      def __init__(self, table: SymbolTable)

      def `Done` as done(self) -> bool 

      def `Value` as value(self) -> int 

      def `Symbol` as symbol(self) -> str 

      def `Next` as next(self) 
      def `Reset` as reset(self) 

    def `RelabelSymbolTable` as relabel_symbol_table(
        table: SymbolTable, pairs: list<tuple<int, int>>) -> SymbolTable 
    def `CompatSymbols` as compat_symbols(
        syms1: SymbolTable, syms2: SymbolTable, warning: bool = default) -> bool 

    def `SymbolTableToString` as serialize_symbol_table(table: SymbolTable) -> bytes

    def `StringToSymbolTable` as deserialize_symbol_table(str: bytes) -> SymbolTable
