from "matrix/kaldi-vector-clifwrap.h" import *
from "fstext/float-weight-clifwrap.h" import *
from "fstext/lattice-weight-clifwrap.h" import *
from "fstext/arc-clifwrap.h" import *
from "fstext/vector-fst-clifwrap.h" import *
from "itf/options-itf-clifwrap.h" import *
from "base/iostream-clifwrap.h" import *
from "hmm/transition-model-clifwrap.h" import *
from "itf/context-dep-itf-clifwrap.h" import *

from kaldi.fstext._deterministic_fst import StdDeterministicOnDemandFst
from kaldi.util import _value_error_on_false

from "chain/chain-supervision.h":
  namespace `kaldi::chain`:
    class SupervisionOptions:
     
      left_tolerance: int
     

      right_tolerance: int


      frame_subsampling_factor: int


      weight: float
     
      lm_scale: float
     
      convert_to_pdfs: bool
      

      def `Register` as register(self, opts: OptionsItf)
       
      def `Check` as check(self)

    class ProtoSupervision:
      

      allowed_phones: list<list<int>>
     

      fst: StdVectorFst
      

      def `Write` as write(self, os: ostream, binary: bool)

    def `AlignmentToProtoSupervision` as alignment_to_proto_supervision(
      opts: SupervisionOptions, phones: list<int>, durations: list<int>)
      -> (success: bool, proto_supervision: ProtoSupervision):
      return _value_error_on_false(...)

    def `AlignmentToProtoSupervision`
        as alignment_to_proto_supervision_with_phones_durs(
      opts: SupervisionOptions, phones_durs: list<tuple<int, int>>)
      -> (success: bool, proto_supervision: ProtoSupervision):

      return _value_error_on_false(...)

    def `PhoneLatticeToProtoSupervision`
        as phone_lattice_to_proto_supervision(
      opts: SupervisionOptions, clat: CompactLatticeVectorFst)
      -> (success: bool, proto_supervision: ProtoSupervision):
      return _value_error_on_false(...)

    class TimeEnforcerFst(StdDeterministicOnDemandFst):
      
      def __init__(self, trans_model: TransitionModel, convert_to_pdfs: bool,
                   allowed_phones: list<list<int>>)

      def `Start` as start(self) -> int

      def `Final` as final(self, state: int) -> TropicalWeight

      def `GetArc` as get_arc(self, s: int, ilabel: int)
        -> (success: bool, oarc: StdArc):
       
        return _value_error_on_false(...)

    class Supervision:
  

      weight: float
      

      num_sequences: int
  

      frames_per_sequence: int


      label_dim: int


      fst: StdVectorFst
      

      @add__init__
      def `Supervision` as from_other(self, other: Supervision)
       

      def `Swap` as swap(self, other: Supervision)

      def __eq__(self, other: Supervision) -> bool

      def `Check` as check(self, trans_model: TransitionModel)

      def `Write` as write(self, os:ostream, binary: bool)

      def `Read` as read(self, is:istream, binary: bool)

    def `ProtoSupervisionToSupervision` as proto_supervision_to_supervision(
      ctx_dep: ContextDependencyInterface, trans_model: TransitionModel,
      proto_supervision: ProtoSupervision, convert_to_pdfs: bool)
      -> (success: bool, supervision: Supervision):
      return _value_error_on_false(...)

    def `TrainingGraphToSupervisionE2e` as training_graph_to_supervision_e2e(
      training_graph: StdVectorFst, trans_model: TransitionModel, num_frames: int)
      -> (success: bool, supervision: Supervision):
      
      return _value_error_on_false(...)

    def `SortBreadthFirstSearch` as sort_breadth_first_search(fst: StdVectorFst)

    class SupervisionSplitter:
     
      def __init__(self, supervision: Supervision)

      def `GetFrameRange` as get_frame_range(self, begin_frame: int, frames_per_sequence: int) -> (supervision: Supervision)

    def `AddWeightToSupervisionFst` as add_weight_to_supervision_fst(normalization_fst: StdVectorFst, supervision: Supervision) -> (success: bool)
      return _value_error_on_false(...)

    def `ComputeFstStateTimes` as compute_fst_state_times(fst: StdVectorFst) -> (path_length: int, state_times: list<int>)
      
    def `SplitIntoRanges` as split_into_ranges(num_frames: int, frames_per_range: int) -> (range_starts: list<int>)

    def `GetWeightsForRanges` as get_weights_for_ranges(range_length: int, range_starts: list<int>) -> (weights: list<Vector>)

    def `ConvertSupervisionToUnconstrained` as convert_supervision_to_unconstrained(
      trans_model: TransitionModel, supervision: Supervision) -> bool
      return _value_error_on_false(...)
