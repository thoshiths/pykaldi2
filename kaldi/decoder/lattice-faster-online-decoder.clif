from "itf/decodable-itf-clifwrap.h" import *
from "itf/options-itf-clifwrap.h" import *
from "fstext/lattice-weight-clifwrap.h" import *
from "fstext/fst-clifwrap.h" import *
from "fstext/vector-fst-clifwrap.h" import *
from "decoder/lattice-faster-decoder-clifwrap.h" import *

from "decoder/lattice-faster-online-decoder.h":
  namespace `kaldi`:
    class LatticeFasterOnlineDecoder:
  
      def __init__(self, fst: StdFst, opts: LatticeFasterDecoderOptions)

      def `SetOptions` as set_options(self, opts: LatticeFasterDecoderOptions)

      def `GetOptions` as get_options(self) -> LatticeFasterDecoderOptions

      def `Decode` as decode(self, decodable: DecodableInterface) -> bool

      def `ReachedFinal` as reached_final(self) -> bool 
      
      def `GetBestPath` as _get_best_path(self,
          fst_out: LatticeVectorFst, use_final_probs: bool = default) -> bool

      def `GetRawLattice` as _get_raw_lattice(self,
          fst_out: LatticeVectorFst, use_final_probs: bool = default) -> bool

      def `GetRawLatticePruned` as _get_raw_lattice_pruned(self,
          fst_out: LatticeVectorFst, use_final_probs: bool,
          beam: float) -> bool

      def `InitDecoding` as init_decoding(self)

      def `AdvanceDecoding` as advance_decoding(self,
          decodable: DecodableInterface, max_num_frames: int = default)

      def `FinalizeDecoding` as finalize_decoding(self)

      def `FinalRelativeCost` as final_relative_cost(self) -> float

      def `NumFramesDecoded` as num_frames_decoded(self) -> int