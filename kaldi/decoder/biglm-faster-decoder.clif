from "itf/decodable-itf-clifwrap.h" import *
from "itf/options-itf-clifwrap.h" import *
from "fstext/lattice-weight-clifwrap.h" import *
from "fstext/fst-clifwrap.h" import *
from "fstext/mutable-fst-clifwrap.h" import *
from "fstext/deterministic-fst-clifwrap.h" import *

from kaldi.decoder._faster_decoder import FasterDecoderOptions

from "decoder/biglm-faster-decoder.h":
  namespace `kaldi`:
    class BiglmFasterDecoderOptions(FasterDecoderOptions):
      pass

    class BiglmFasterDecoder:
      def __init__(self, fst: StdFst, opts: BiglmFasterDecoderOptions,
                   lm_diff_fst: StdDeterministicOnDemandFst)

      def `SetOptions` as set_options(self, opts: BiglmFasterDecoderOptions)

      def `Decode` as decode(self, decodable: DecodableInterface)

      def `ReachedFinal` as reached_final(self) -> bool

      def `GetBestPath` as _get_best_path(self,
          fst_out: LatticeMutableFst, use_final_probs: bool = default) -> bool
