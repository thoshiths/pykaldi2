from "itf/decodable-itf-clifwrap.h" import *
from "itf/options-itf-clifwrap.h" import *
from "fstext/lattice-weight-clifwrap.h" import *
from "fstext/fst-clifwrap.h" import *
from "fstext/mutable-fst-clifwrap.h" import *
from "fstext/deterministic-fst-clifwrap.h" import *
from "lat/determinize-lattice-pruned-clifwrap.h" import *
from "decoder/lattice-faster-decoder-clifwrap.h" import *

from "decoder/lattice-biglm-faster-decoder.h":
  namespace `kaldi`:

    class LatticeBiglmFasterDecoder

      def __init__(self, fst: StdFst, opts: LatticeFasterDecoderOptions,
                   lm_diff_fst: StdDeterministicOnDemandFst)

      def `SetOptions` as set_options(self, opts: LatticeFasterDecoderOptions)

      def `Decode` as decode(self, decodable: DecodableInterface) -> bool

      def `ReachedFinal` as reached_final(self) -> bool
      
      def `GetBestPath` as _get_best_path(self,
          fst_out: LatticeMutableFst, use_final_probs: bool = default) -> bool

      def `GetRawLattice` as _get_raw_lattice(self,
          fst_out: LatticeMutableFst, use_final_probs: bool = default) -> bool

      def `GetLattice` as _get_lattice(self, fst_out: CompactLatticeMutableFst,
                                      use_final_probs: bool = default) -> bool
