from "base/iostream-clifwrap.h" import *
from "fstext/float-weight-clifwrap.h" import *
from "fstext/lattice-weight-clifwrap.h" import *
from "fstext/const-fst-clifwrap.h" import *
from "fstext/vector-fst-clifwrap.h" import *

from kaldi.fstext import StdVectorFst

from "decoder/grammar-fst.h":
  namespace `fst`:
    class GrammarFstArc:
      ilabel: int
     
      olabel: int
      
      weight: TropicalWeight
      
      nextstate: int
      

      @add__init__
      def `ArcTpl` as from_attrs(self, ilabel: int, olabel:int,
                                 weight: TropicalWeight, nextstate: int)
       

    class GrammarFst:

      @add__init__
      def `GrammarFst` as from_fsts(self, top_fst: StdConstFst,
                                    ifsts: list<tuple<int, StdConstFst>>,
                                    nonterm_phones_offset: int)

      def `Write` as write(self, os: ostream, binary: bool)

      def `Read` as read(self, is: istream, binary: bool)

      def `Start` as start(self) -> int

      def `Final` as final(self, state: int) -> TropicalWeight
      
      def `NumInputEpsilons` as num_input_epsilons(self, state: int) -> int

      def `Type` as type(self) -> str


    class `ArcIterator<GrammarFst>` as GrammarFstArcIterator

      def __init__(self, fst: GrammarFst, s: int)

      def `Done` as done(self) -> bool

      def `Next` as next(self)

      def `Value` as value(self) -> GrammarFstArc 

    def `CopyToVectorFst` as grammar_to_vector_fst(grammar_fst: GrammarFst) -> StdVectorFst:

      return StdVectorFst(...)

    def `PrepareForGrammarFst` as prepare_for_grammar_fst(nonterm_phones_offset: int, fst: StdVectorFst)
