from "matrix/matrix-common-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "matrix/kaldi-matrix-clifwrap.h" import *

from "matrix/compressed-matrix.h":
  namespace `kaldi`:
    enum CompressionMethod with:
#     kAutomaticMethod = 1 This is the default when you don't specify the
#                         compression method.  It is a shorthand for using
#                         kSpeechFeature if the num-rows is more than 8, and
#                         kTwoByteAuto otherwise.
#     kSpeechFeature = 2  This is the most complicated of the compression methods,
#                         and was designed for speech features which have a roughly
#                         Gaussian distribution with different ranges for each
#                         dimension.  Each element is stored in one byte, but there
#                         is an 8-byte header per column; the spacing of the
#                         integer values is not uniform but is in 3 ranges.
#     kTwoByteAuto = 3    Each element is stored in two bytes as a uint16, with
#                         the representable range of values chosen automatically
#                         with the minimum and maximum elements of the matrix as
#                         its edges.
#     kTwoByteSignedInteger = 4
#                         Each element is stored in two bytes as a uint16, with
#                         the representable range of value chosen to coincide with
#                         what you'd get if you stored signed integers, i.e.
#                         [-32768.0, 32767.0].  Suitable for waveform data that
#                         was previously stored as 16-bit PCM.
#     kOneByteAuto = 5    Each element is stored in one byte as a uint8, with the
#                         representable range of values chosen automatically with
#                         the minimum and maximum elements of the matrix as its
#                         edges.
#     kOneByteUnsignedInteger = 6 Each element is stored in
#                         one byte as a uint8, with the representable range of
#                         values equal to [0.0, 255.0].
#     kOneByteZeroOne = 7 Each element is stored in
#                         one byte as a uint8, with the representable range of
#                         values equal to [0.0, 1.0].  Suitable for image data
#                         that has previously been compressed as int8.
      `kAutomaticMethod` as AUTO
      `kSpeechFeature` as SPEECH_FEATURE
      `kTwoByteAuto` as TWO_BYTE_AUTO
      `kTwoByteSignedInteger` as TWO_BYTE_SIGNED_INTEGER
      `kOneByteAuto` as ONE_BYTE_AUTO
      `kOneByteUnsignedInteger` as ONE_BYTE_UNSIGNED_INTEGER
      `kOneByteZeroOne` as TWO_BYTE_ZERO_ONE


    class CompressedMatrix:
      
      @add__init__
      def `CompressedMatrix` as new(self, mat: MatrixBase,
                                    method: CompressionMethod = default)

      @add__init__
      def `CompressedMatrix` as new_with_range(self, mat: CompressedMatrix,
                                             row_offset: int, num_rows: int,
                                             col_offset: int, num_cols:int,
                                             allow_padding: bool = default)

      @add__init__
      def `CompressedMatrix` as new_with_other(self, mat: CompressedMatrix)

      def `CopyFromMat` as copy_from_mat(self, mat: MatrixBase,
                      method: CompressionMethod = default)

      def `CopyToMat` as copy_to_mat(self, mat: MatrixBase,
                    method: MatrixTransposeType = default)

      num_rows: int = property(`NumRows`)
      

      num_cols: int = property(`NumCols`)
      

      def `CopyRowToVec` as copy_row_to_vec(self, row: int, v: VectorBase)

      def `CopyColToVec` as copy_col_to_vec(self, col: int, v: VectorBase)

      def `CopyToMat` as copy_to_mat_offset(self, row_offset: int,
                                         col_offset: int, dest: MatrixBase)


      def `Swap` as swap(self, other: CompressedMatrix)

      def `Clear` as clear(self)

      def `Scale` as scale(self, alpha: float)
