from "base/iostream-clifwrap.h" import *
from "matrix/matrix-common-clifwrap.h" import *

from "matrix/kaldi-vector.h":
  namespace `kaldi`:
    class `VectorBase<float>` as VectorBase:
    

      def `SetZero` as set_zero_(self) -> self

      def `IsZero` as is_zero(self, cutoff: float = default) -> bool

      def `Set` as set_(self, f: float) -> self 

      def `SetRandn` as set_randn_(self) -> self

      def `SetRandUniform` as set_rand_uniform_(self) -> self

      def `RandCategorical` as rand_categorical(self) -> int 

      def `Dim` as __len__(self) -> int

      dim: int = property(`Dim`)
      

      def `SizeInBytes` as size_in_bytes(self) -> int

      # NOTE:
      # Data method is implemented in Python.

      def `operator()` as _getitem(self, index: int) -> float 
      def `Set` as _setitem_(self, index: int, value: float)
      # NOTE:
      # Range method is implemented in Python.

      def `CopyFromVec` as _copy_from_vec_(self, v: VectorBase) -> self

      # NOTE:
      # CopyFromPacked is wrapped via a shim defined in kaldi-matrix-ext.h.

      def `ApplyLog` as apply_log_(self) -> self

      def `ApplyLogAndCopy` as apply_log_and_copy_(self, v: VectorBase) -> self 

      def `ApplyExp` as apply_exp_(self) -> self

      def `ApplyAbs` as apply_abs_(self) -> self

      def `ApplyFloor` as apply_floor_(self, floor: float) -> int 

      def `ApplyFloor` as apply_floor_no_count_(self, floor: float) 

      def `ApplyCeiling` as apply_ceiling_(self, ceiling: float) -> int 

      def `ApplyCeiling` as apply_ceiling_no_count_(self, ceiling: float) 

      def `ApplyFloor` as apply_floor_vector_(self, floor: VectorBase) -> int 

      def `ApplySoftMax` as apply_softmax_(self) -> float 

      def `ApplyLogSoftMax` as apply_log_softmax_(self) -> float 

      def `Tanh` as tanh_(self, src: VectorBase) -> self 

      def `Sigmoid` as sigmoid_(self, src: VectorBase) -> self 

      def `ApplyPow` as apply_pow_(self, power: float) -> self 

      def `ApplyPowAbs` as apply_pow_abs_(self, power: float,
                                          include_sign: bool = default) -> self 

      def `Norm` as norm(self, p: float) -> float 

      def `ApproxEqual` as _approx_equal(self, other: VectorBase,
                                         tol: float = default) -> bool 

      def `InvertElements` as invert_elements_(self) -> self 
      def `AddVec` as _add_vec_(self, alpha: float, v: VectorBase) -> self 

      def `AddVec2` as _add_vec2_(self, alpha: float, v: VectorBase) -> self 

      # NOTE:
      # These methods are wrapped via shims defined in kaldi-matrix-ext.h.
      #
      # def AddMatVec(self, alpha: `float` as float, M: MatrixBase,
      #               trans: MatrixTransposeType, v: VectorBase,
      #               beta: `float` as float)
      #
      # def AddMatSvec(self, alpha: `float` as float, M: MatrixBase,
      #                trans: MatrixTransposeType, v: VectorBase,
      #                beta: `float` as float)
      #
      # def AddSpVec(self, alpha: `float` as float, M: SpMatrix,
      #              v: VectorBase, beta: `float` as float)
      #
      # def AddTpVec(self, alpha: `float` as float, M: TpMatrix,
      #              trans: MatrixTransposeType, v: VectorBase,
      #              beta: `float` as float)

      def `ReplaceValue` as replace_value_(self, orig: float,
                                           changed: float) -> self 

      def `MulElements` as _mul_elements_(self, v: VectorBase) -> self 
      def `DivElements` as _div_elements_(self, v: VectorBase) -> self 

      def `Add` as add_(self, value: float) -> self 

      def `AddVecVec` as add_vec_vec_(self, alpha: float, v: VectorBase,
                                      r: VectorBase, beta: float) -> self 

      def `AddVecDivVec` as add_vec_div_vec_(self, alpha: float, v: VectorBase,
                                             r: VectorBase, beta: float) -> self 

      def `Scale` as scale_(self, alpha: float) -> self 
      # NOTE:
      # These methods are wrapped via shims defined in kaldi-matrix-ext.h.
      #
      # def MulTp(self, M: TpMatrix, trans: MatrixTransposeType)
      #
      # def Solve(self, M: TpMatrix, trans: MatrixTransposeType)
      #
      # def CopyRowsFromMat(self, M: MatrixBase)
      #
      # def CopyColsFromMat(self, M: MatrixBase)
      #
      # def CopyRowFromMat(self, M: MatrixBase, row: int)
      #
      # def CopyColFromMat(self, M: MatrixBase, col: int)
      #
      # def CopyDiagFromMat(self, M: MatrixBase)
      #
      # def CopyDiagFromPacked(self, M: PackedMatrix)
      #
      # def CopyDiagFromSp(self, M: SpMatrix)
      #
      # def CopyDiagFromTp(self, M: TpMatrix)

      def `Max` as max(self) -> float

      def `Max` as max_index(self) -> (value: float, index: int)

      def `Min` as min(self) -> float

      def `Min` as min_index(self) -> (value: float, index: int)

      def `Sum` as sum(self) -> float

      def `SumLog` as sum_log(self) -> float 

      def `LogSumExp` as log_sum_exp(self, prune: float = default) -> float 
      # NOTE:
      # These methods are wrapped via shims defined in kaldi-matrix-ext.h.
      #
      # def AddRowSumMat(self, alpha: `float` as float, M: MatrixBase,
      #                  beta: `float` as float = default)
      #
      # def AddColSumMat(self, alpha: `float` as float, M: MatrixBase,
      #                  beta: `float` as float = default)
      #
      # def AddDiagMat2(self, alpha: `float` as float, M: MatrixBase,
      #                 trans: MatrixTransposeType = default,
      #                 beta: `float` as float = default)
      #
      # def AddDiagMatMat(self, alpha: `float` as float,
      #                   M: MatrixBase, transM: MatrixTransposeType,
      #                   N: MatrixBase, transN: MatrixTransposeType,
      #                   beta: `float` as float = default)

      def `Read` as read_(self, is: istream, binary: bool,
                          add: bool = default) -> self 

      def `Write` as write(self, os: ostream, binary: bool) 

    # Note:
    # SubVector is wrapped manually in matrix-ext.cc.

    class `Vector<float>` as Vector(VectorBase):
      

      @add__init__
      def `Vector` as from_size(self, size: int,
                                resize_type: MatrixResizeType = default)
        

      # NOTE:
      # Match fails since this signature matches multiple copy constructors.
      # No need to wrap this one since the copy constructor accepting a
      # VectorBase covers both cases and does the same thing internally.
      # @add__init__
      # def `Vector` as from_vector(self, v: Vector)

      @add__init__
      def `Vector` as from_vector(self, v: VectorBase) 

      def `Swap` as swap_(self, other: Vector) -> self 

      def `Read` as read_(self, is: istream, binary: bool,
                          add: bool = default) -> self 

      def `Resize` as resize_(self, length: int,
                              resize_type: MatrixResizeType = default) -> self 

      def `RemoveElement` as _remove_element_(self, index: int) 

    # NOTE:
    # These functions were renamed to avoid name conflicts.

    def `ApproxEqual` as _approx_equal_vector(
        a: VectorBase, b: VectorBase, tol: `float` as float = default) -> bool 

    def `AssertEqual` as _assert_equal_vector(a: VectorBase, b: VectorBase,
                                              tol: float = default) 

    def `VecVec` as _vec_vec(v1: VectorBase, v2: VectorBase) -> float

    # NOTE:
    # VecMatVec function is wrapped via a shim defined in kaldi-matrix-ext.h.


    class `VectorBase<double>` as DoubleVectorBase:
      

      def `SetZero` as set_zero_(self) -> self

      def `IsZero` as is_zero(self, cutoff: float = default) -> bool 

      def `Set` as set_(self, f: float) -> self 

      def `SetRandn` as set_randn_(self) -> self

      def `SetRandUniform` as set_randn_uniform_(self) -> self

      def `RandCategorical` as rand_categorical(self) -> int 

      def `Dim` as __len__(self) -> int

      dim: int = property(`Dim`)
      

      def `SizeInBytes` as size_in_bytes(self) -> int

      # NOTE:
      # Data method is implemented in Python.

      def `operator()` as _getitem(self, index: int) -> float 

      def `Set` as _setitem_(self, index: int, value: float) 

      # NOTE:
      # Range method is implemented in Python.

      def `CopyFromVec` as _copy_from_vec_(self, v: DoubleVectorBase) -> self 

      # NOTE:
      # CopyFromPacked is wrapped via a shim defined in kaldi-matrix-ext.h.

      def `ApplyLog` as apply_log_(self) -> self

      def `ApplyLogAndCopy` as apply_log_and_copy_(self, v: DoubleVectorBase) -> self 

      def `ApplyExp` as apply_exp_(self) -> self

      def `ApplyAbs` as apply_abs_(self) -> self

      def `ApplyFloor` as apply_floor_(self, floor: float) -> int 

      def `ApplyCeiling` as apply_ceiling_(self, ceiling: float) -> int 

      def `ApplyFloor` as apply_floor_vector_(self, floor: DoubleVectorBase) -> int 

      def `ApplySoftMax` as apply_softmax_(self) -> float 
      def `ApplyLogSoftMax` as apply_log_softmax_(self) -> float 

      def `Tanh` as tanh_(self, src: DoubleVectorBase) -> self 

      def `Sigmoid` as sigmoid_(self, src: DoubleVectorBase) -> self 
      def `ApplyPow` as apply_pow_(self, power: float) -> self 
      def `ApplyPowAbs` as apply_pow_abs_(self, power: float,
                                          include_sign: bool = default) -> self 

      def `Norm` as norm(self, p: float) -> float 

      def `ApproxEqual` as _approx_equal(self, other: DoubleVectorBase,
                                         tol: float = default) -> bool 

      def `InvertElements` as invert_elements_(self) -> self

      def `AddVec` as _add_vec_(self, alpha: float, v: DoubleVectorBase) -> self 

      def `AddVec2` as _add_vec2_(self, alpha: float, v: DoubleVectorBase) -> self 

      # NOTE:
      # These methods are wrapped via shims defined in kaldi-matrix-ext.h.
      #
      # def AddMatVec(self, alpha: `float` as float, M: MatrixBase,
      #               trans: MatrixTransposeType, v: VectorBase,
      #               beta: `float` as float)
      #
      # def AddMatSvec(self, alpha: `float` as float, M: MatrixBase,
      #                trans: MatrixTransposeType, v: VectorBase,
      #                beta: `float` as float)
      #
      # def AddSpVec(self, alpha: `float` as float, M: SpMatrix,
      #              v: VectorBase, beta: `float` as float)
      #
      # def AddTpVec(self, alpha: `float` as float, M: TpMatrix,
      #              trans: MatrixTransposeType, v: VectorBase,
      #              beta: `float` as float)

      def `ReplaceValue` as replace_value_(self, orig: float,
                                           changed: float) -> self 

      def `MulElements` as _mul_elements_(self, v: DoubleVectorBase) -> self 

      def `DivElements` as _div_elements_(self, v: DoubleVectorBase) -> self 

      def `Add` as add_(self, value: float) -> self 

      def `AddVecVec` as add_vec_vec_(self, alpha: float, v: DoubleVectorBase,
                                      r: DoubleVectorBase, beta: float) -> self 
      def `AddVecDivVec` as add_vec_div_vec_(self, alpha: float, v: DoubleVectorBase,
                                             r: DoubleVectorBase, beta: float) -> self 

      def `Scale` as scale_(self, alpha: float) -> self 

      # NOTE:
      # These methods are wrapped via shims defined in kaldi-matrix-ext.h.
      #
      # def MulTp(self, M: TpMatrix, trans: MatrixTransposeType)
      #
      # def Solve(self, M: TpMatrix, trans: MatrixTransposeType)
      #
      # def CopyRowsFromMat(self, M: MatrixBase)
      #
      # def CopyColsFromMat(self, M: MatrixBase)
      #
      # def CopyRowFromMat(self, M: MatrixBase, row: int)
      #
      # def CopyColFromMat(self, M: MatrixBase, col: int)
      #
      # def CopyDiagFromMat(self, M: MatrixBase)
      #
      # def CopyDiagFromPacked(self, M: PackedMatrix)
      #
      # def CopyDiagFromSp(self, M: SpMatrix)
      #
      # def CopyDiagFromTp(self, M: TpMatrix)

      def `Max` as max(self) -> float

      def `Max` as max_index(self) -> (value: float, index: int)

      def `Min` as min(self) -> float

      def `Min` as min_index(self) -> (value: float, index: int)

      def `Sum` as sum(self) -> float

      def `SumLog` as sum_log(self) -> float 

      def `LogSumExp` as log_sum_exp(self, prune: float = default) -> float 

      # NOTE:
      # These methods are wrapped via shims defined in kaldi-matrix-ext.h.
      #
      # def AddRowSumMat(self, alpha: `float` as float, M: MatrixBase,
      #                  beta: `float` as float = default)
      #
      # def AddColSumMat(self, alpha: `float` as float, M: MatrixBase,
      #                  beta: `float` as float = default)
      #
      # def AddDiagMat2(self, alpha: `float` as float, M: MatrixBase,
      #                 trans: MatrixTransposeType = default,
      #                 beta: `float` as float = default)
      #
      # def AddDiagMatMat(self, alpha: `float` as float,
      #                   M: MatrixBase, transM: MatrixTransposeType,
      #                   N: MatrixBase, transN: MatrixTransposeType,
      #                   beta: `float` as float = default)

      def `Read` as read_(self, is: istream, binary: bool,
                          add: bool = default) -> self 

      def `Write` as write(self, os: ostream, binary: bool) 
    # Note:
    # DoubleSubVector is wrapped manually in matrix-ext.cc.

    class `Vector<double>` as DoubleVector(DoubleVectorBase):
      

      @add__init__
      def `Vector` as from_size(self, size: int,
                                resize_type: MatrixResizeType = default)

      # NOTE:
      # Match fails since this signature matches multiple copy constructors.
      # No need to wrap this one since the copy constructor accepting a
      # DoubleVectorBase covers both cases and does the same thing internally.
      # @add__init__
      # def `Vector` as from_vector(self, v: Vector)

      @add__init__
      def `Vector` as from_vector(self, v: DoubleVectorBase) 

      def `Swap` as swap_(self, other: DoubleVector) -> self 

      def `Read` as read_(self, is: istream, binary: bool,
                          add: bool = default) -> self 

      def `Resize` as resize_(self, length: int,
                              resize_type: MatrixResizeType = default) -> self 

      def `RemoveElement` as _remove_element_(self, index: int) 

    # NOTE:
    # These functions were renamed to avoid name conflicts.

    def `ApproxEqual` as _approx_equal_double_vector(
        a: DoubleVectorBase, b: DoubleVectorBase, tol: float = default) -> bool 

    def `AssertEqual` as _assert_equal_double_vector(
        a: DoubleVectorBase, b: DoubleVectorBase, tol: float = default) 
      

    def `VecVec` as _vec_vec_double(v1: DoubleVectorBase,
                                    v2: DoubleVectorBase) -> float 

    # NOTE:
    # VecMatVec function is wrapped via a shim defined in kaldi-matrix-ext.h.
