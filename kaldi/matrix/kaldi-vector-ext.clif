from "matrix/matrix-common-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "matrix/kaldi-matrix-clifwrap.h" import *
from "matrix/packed-matrix-clifwrap.h" import *
from "matrix/sp-matrix-clifwrap.h" import *
from "matrix/tp-matrix-clifwrap.h" import *

from "matrix/kaldi-vector-ext.h":
  namespace `kaldi`:

    # Shims for single precision vectors

    def `CopyFromPacked` as _copy_from_packed(self: VectorBase, M: PackedMatrix) 

    def `CopyFromPacked` as _copy_from_double_packed(self: VectorBase, M: DoublePackedMatrix) 

    def `CopyFromVec` as _copy_from_double_vec(self: VectorBase, v: DoubleVectorBase) 

    def `AddVec` as _add_double_vec(self: VectorBase, alpha: `float` as float, v: DoubleVectorBase) 

    def `AddVec2` as _add_double_vec2(self: VectorBase, alpha: `float` as float, v: DoubleVectorBase) 

    def `AddMatVec` as _add_mat_vec(self: VectorBase, alpha: `float` as float,
                                    M: MatrixBase, trans: MatrixTransposeType,
                                    v: VectorBase, beta: `float` as float) 

    def `AddMatSvec` as _add_mat_svec(self: VectorBase, alpha: `float` as float,
                                      M: MatrixBase, trans: MatrixTransposeType,
                                      v: VectorBase, beta: `float` as float) 

    def `AddSpVec` as _add_sp_vec(self: VectorBase, alpha: `float` as float, M: SpMatrix,
                                  v: VectorBase, beta: `float` as float) 

    def `AddTpVec` as _add_tp_vec(self: VectorBase, alpha: `float` as float, M: TpMatrix,
                                  trans: MatrixTransposeType, v: VectorBase,
                                  beta: `float` as float) 

    def `MulElements` as _mul_double_elements(self: VectorBase, v: DoubleVectorBase)

    def `DivElements` as _div_double_elements(self: VectorBase, v: DoubleVectorBase) 


    def `MulTp` as _mul_tp(self: VectorBase, M: TpMatrix,
                           trans: MatrixTransposeType) 

    def `Solve` as _solve(self: VectorBase, M: TpMatrix,
                          trans: MatrixTransposeType) 

    def `CopyRowsFromMat` as _copy_rows_from_mat(self: VectorBase, M: MatrixBase)

    def `CopyRowsFromMat` as _copy_rows_from_double_mat(self: VectorBase, M: DoubleMatrixBase)

    def `CopyColsFromMat` as _copy_cols_from_mat(self: VectorBase, M: MatrixBase) 

    def `CopyRowFromMat` as _copy_row_from_mat(self: VectorBase, M: MatrixBase, row: int) 

    def `CopyRowFromMat` as _copy_row_from_double_mat(self: VectorBase, M: DoubleMatrixBase, row: int) 

    def `CopyRowFromSp` as _copy_row_from_sp(self: VectorBase, M: SpMatrix, row: int) 

    def `CopyRowFromSp` as _copy_row_from_double_sp(self: VectorBase, M: DoubleSpMatrix, row: int)

    def `CopyColFromMat` as _copy_col_from_mat(self: VectorBase, M: MatrixBase, col: int) 

    def `CopyColFromMat` as _copy_col_from_double_mat(self: VectorBase, M: DoubleMatrixBase, col: int)

    def `CopyDiagFromMat` as _copy_diag_from_mat(self: VectorBase, M: MatrixBase)

    def `CopyDiagFromPacked` as _copy_diag_from_packed(self: VectorBase, M: PackedMatrix) 

    def `CopyDiagFromSp` as _copy_diag_from_sp(self: VectorBase, M: SpMatrix)

    def `CopyDiagFromTp` as _copy_diag_from_tp(self: VectorBase, M: TpMatrix) 

    def `AddRowSumMat` as _add_row_sum_mat(self: VectorBase, alpha: `float` as float,
                                           M: MatrixBase,
                                           beta: `float` as float = default) 

    def `AddColSumMat` as _add_col_sum_mat(self: VectorBase, alpha: `float` as float,
                                           M: MatrixBase,
                                           beta: `float` as float = default) 

    def `AddDiagMat2` as _add_diag_mat2(self: VectorBase, alpha: `float` as float,
                                        M: MatrixBase,
                                        trans: MatrixTransposeType = default,
                                        beta: `float` as float = default) 

    def `AddDiagMatMat` as _add_diag_mat_mat(self: VectorBase, alpha: `float` as float,
                                            M: MatrixBase,
                                            transM: MatrixTransposeType,
                                            N: MatrixBase,
                                            transN: MatrixTransposeType,
                                            beta: `float` as float = default) 

    def `VecMatVec` as _vec_mat_vec(v1: VectorBase, M: MatrixBase,
                                   v2: VectorBase) -> float 


    # Shims for double precision vectors

    def `CopyFromPacked` as _copy_from_packed_double(self: DoubleVectorBase, M: DoublePackedMatrix) 

    def `CopyFromPacked` as _copy_from_single_packed_double(self: DoubleVectorBase, M: PackedMatrix) 

    def `CopyFromVec` as _copy_from_single_vec_double(self: DoubleVectorBase, v: VectorBase) 

    def `AddVec` as _add_single_vec_double(self: DoubleVectorBase, alpha: float, v: VectorBase) 

    def `AddVec2` as _add_single_vec2_double(self: DoubleVectorBase, alpha: float, v: VectorBase) 

    def `AddMatVec` as _add_mat_vec_double(self: DoubleVectorBase, alpha: float,
                                           M: DoubleMatrixBase, trans: MatrixTransposeType,
                                           v: DoubleVectorBase, beta: float) 

    def `AddMatSvec` as _add_mat_svec_double(self: DoubleVectorBase, alpha: float,
                                             M: DoubleMatrixBase, trans: MatrixTransposeType,
                                             v: DoubleVectorBase, beta: float) 

    def `AddSpVec` as _add_sp_vec_double(self: DoubleVectorBase, alpha: float, M: DoubleSpMatrix,
                                         v: DoubleVectorBase, beta: float) 

    def `AddTpVec` as _add_tp_vec_double(self: DoubleVectorBase, alpha: float, M: DoubleTpMatrix,
                                         trans: MatrixTransposeType, v: DoubleVectorBase, beta: float) 

    def `MulElements` as _mul_single_elements_double(self: DoubleVectorBase, v: VectorBase) 

    def `DivElements` as _div_single_elements_double(self: DoubleVectorBase, v: VectorBase) 

    def `MulTp` as _mul_tp_double(self: DoubleVectorBase, M: DoubleTpMatrix,
                                  trans: MatrixTransposeType) 

    def `Solve` as _solve_double(self: DoubleVectorBase, M: DoubleTpMatrix,
                                 trans: MatrixTransposeType)

    def `CopyRowsFromMat` as _copy_rows_from_mat_double(self: DoubleVectorBase, M: DoubleMatrixBase) 

    def `CopyRowsFromMat` as _copy_rows_from_single_mat_double(self: DoubleVectorBase, M: MatrixBase) 

    def `CopyColsFromMat` as _copy_cols_from_mat_double(self: DoubleVectorBase, M: DoubleMatrixBase)

    def `CopyRowFromMat` as _copy_row_from_mat_double(self: DoubleVectorBase, M: DoubleMatrixBase, row: int) 

    def `CopyRowFromMat` as _copy_row_from_single_mat_double(self: DoubleVectorBase, M: MatrixBase, row: int) 

    def `CopyRowFromSp` as _copy_row_from_sp_double(self: DoubleVectorBase, M: DoubleSpMatrix, row: int) 

    def `CopyRowFromSp` as _copy_row_from_single_sp_double(self: DoubleVectorBase, M: SpMatrix, row: int) 

    def `CopyColFromMat` as _copy_col_from_mat_double(self: DoubleVectorBase, M: DoubleMatrixBase, col: int)

    def `CopyColFromMat` as _copy_col_from_single_mat_double(self: DoubleVectorBase, M: MatrixBase, col: int)

    def `CopyDiagFromMat` as _copy_diag_from_mat_double(self: DoubleVectorBase, M: DoubleMatrixBase)

    def `CopyDiagFromPacked` as _copy_diag_from_packed_double(self: DoubleVectorBase, M: DoublePackedMatrix)

    def `CopyDiagFromSp` as _copy_diag_from_sp_double(self: DoubleVectorBase, M: DoubleSpMatrix)

    def `CopyDiagFromTp` as _copy_diag_from_tp_double(self: DoubleVectorBase, M: DoubleTpMatrix) 

    def `AddRowSumMat` as _add_row_sum_mat_double(self: DoubleVectorBase, alpha: float,
                                                  M: DoubleMatrixBase,
                                                  beta: float = default)

    def `AddColSumMat` as _add_col_sum_mat_double(self: DoubleVectorBase, alpha: float,
                                                  M: DoubleMatrixBase,
                                                  beta: float = default)

    def `AddDiagMat2` as _add_diag_mat2_double(self: DoubleVectorBase, alpha: float,
                                               M: DoubleMatrixBase,
                                               trans: MatrixTransposeType = default,
                                               beta: float = default)

    def `AddDiagMatMat` as _add_diag_mat_mat_double(self: DoubleVectorBase, alpha: float,
                                                    M: DoubleMatrixBase,
                                                    transM: MatrixTransposeType,
                                                    N: DoubleMatrixBase,
                                                    transN: MatrixTransposeType,
                                                    beta: float = default)

    def `VecMatVec` as _vec_mat_vec_double(
        v1: DoubleVectorBase, M: DoubleMatrixBase, v2: DoubleVectorBase) -> float 