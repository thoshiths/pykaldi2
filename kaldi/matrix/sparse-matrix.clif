from "base/iostream-clifwrap.h" import *
from "matrix/matrix-common-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "matrix/kaldi-matrix-clifwrap.h" import *
from "matrix/compressed-matrix-clifwrap.h" import *
from "cudamatrix/cu-matrix-clifwrap.h" import *

from kaldi.matrix._matrix import _matrix_wrapper

from "matrix/sparse-matrix.h":
  namespace `kaldi`:

    # Single precision

    class `SparseVector<float>` as SparseVector:

      def `Dim` as __len__(self) -> int

      dim: int = property(`Dim`)
      

      def `Sum` as sum(self) -> float

      def `CopyElementsToVec` as copy_elements_to_vec(self, vec: VectorBase) 

      def `AddToVec` as add_to_vec(self, alpha: float, vec: VectorBase) 

      def `CopyFromSvec` as copy_from_svec_(self, other: SparseVector) -> self 

      @add__init__
      def `SparseVector` as from_other(self, other: SparseVector)

      @add__init__
      def `SparseVector` as from_vector(self, vec: VectorBase)

      def `Swap` as swap_(self, other: SparseVector) -> self 

      def `Max` as max(self) -> (value: float, index: int)

      def `NumElements` as num_elements(self) -> int

      def `GetElement` as get_elements(self, i: int) -> tuple<int, float> 

      def `SetRandn` as set_randn_(self, zero_prob: float) -> self

      @add__init__
      def `SparseVector` as from_dim(self, dim: int) 
      @add__init__
      def `SparseVector` as from_pairs(self, dim: int,
                                           pairs: list<tuple<int, float>>) 

      def `Resize` as resize_(self, dim: int, resize_type: MatrixResizeType = default) -> self 

      def `Write` as write(self, os: ostream, binary: bool) 
      def `Read` as read_(self, is: istream, binary: bool) -> self 
      def `Scale` as scale_(self, alpha: float) -> self

    def `VecSvec` as _vec_svec(vec: VectorBase, svec: SparseVector) -> float

    class `SparseMatrix<float>` as SparseMatrix:
      

      def `NumRows` as __len__(self) -> int

      num_rows: int = property(`NumRows`)
      

      num_cols: int = property(`NumCols`)
      

      def `NumElements` as num_elements(self) -> int

      def `Sum` as sum(self) -> float

      def `FrobeniusNorm` as frobenius_norm(self) -> float

      def `CopyToMat` as copy_to_mat(self, other: MatrixBase, t: MatrixTransposeType = default)

      def `CopyElementsToVec` as copy_elements_to_vec(self, other: VectorBase) 

      def `CopyFromSmat` as copy_from_smat_(self, other: SparseMatrix) -> self 

      def `AddToMat` as add_to_mat(self, alpha: float, other: MatrixBase,
                                   t: MatrixTransposeType = default) 

      @add__init__
      def `SparseMatrix` as from_other(self, other: SparseMatrix) 
      @add__init__
      def `SparseMatrix` as from_matrix(self, mat: MatrixBase) 
      def `Swap` as swap_(self, other: SparseMatrix) ->  self

      @add__init__
      def `SparseMatrix` as from_pairs(
          self, dim: int, pairs: list<list<tuple<int, float>>>) 

      def `SetRandn` as set_randn_(self, zero_prob: float) -> self 

      def `Write` as write(self, os: ostream, binary: bool) 

      def `Read` as read_(self, is: istream, binary: bool) -> self 

      def `Row` as row(self, r: int) -> SparseVector

      def `SetRow` as set_row_(self, r: int, vec: SparseVector) -> self

      # def AppendSparseMatrixRows(self, inputs: list<SparseMatrix>)

      @add__init__
      def `SparseMatrix` as from_dims(self, num_rows: int, num_cols: int) 

      def `Resize` as resize_(self, rows: int, cols: int,
                 resize_type: MatrixResizeType = default) -> self 

      def `Scale` as scale_(self, alpha: float) -> self

    def `TraceMatSmat` as _trace_mat_smat(A: MatrixBase, B: SparseMatrix,
                                          trans: MatrixTransposeType = default) -> float 
    enum GeneralMatrixType with:
      `kFullMatrix` as FULL_MATRIX
      `kCompressedMatrix` as COMPRESSED_MATRIX
      `kSparseMatrix` as SPARSE_MATRIX

    class GeneralMatrix:

      def `Type` as type(self) -> GeneralMatrixType 
      def `Compress` as compress(self)

      def `Uncompress` as uncompress(self)

      def `Write` as write(self, os: ostream, binary: bool) 

      def `Read` as read(self, is: istream, binary: bool) 

      def `GetSparseMatrix` as get_sparse_matrix(self) -> SparseMatrix 

      def `SwapSparseMatrix` as swap_sparse_matrix(self, smat: SparseMatrix) 

      def `GetCompressedMatrix` as get_compressed_matrix(self) -> CompressedMatrix 

      def `SwapCompressedMatrix` as swap_compressed_matrix(self, cmat: CompressedMatrix)

      def `GetFullMatrix` as get_full_matrix(self) -> Matrix:
 
        return _matrix_wrapper(...)

      def `GetMatrix` as get_matrix(self) -> Matrix
        return _matrix_wrapper(...)

      def `SwapFullMatrix` as swap_full_matrix(self, cmat: Matrix) 

      def `CopyToMat` as copy_to_mat(self, mat: MatrixBase,
                                     trans: MatrixTransposeType = default)

      def `CopyToMat` as copy_to_cu_mat(self, cu_mat: CuMatrixBase,
                                        trans: MatrixTransposeType = default)

      def `AddToMat` as add_to_mat(self, alpha: float, mat: MatrixBase,
                                   trans: MatrixTransposeType = default) 

      # def `AddToMat` as add_to_cu_mat(self, alpha: float, cu_mat: CuMatrixBase,
      #                                 trans: MatrixTransposeType = default)

      def `Scale` as scale(self, alpha: float)

      def `NumRows` as num_rows(self) -> int

      def `NumCols` as num_cols(self) -> int

      @add__init__
      def `GeneralMatrix` as from_matrix(self, other: MatrixBase)

      @add__init__
      def `GeneralMatrix` as from_compressed(self, other: CompressedMatrix)

      @add__init__
      def `GeneralMatrix` as from_sparse(self, other: SparseMatrix)

      @add__init__
      def `GeneralMatrix` as from_other(self, other: GeneralMatrix)

      def `Clear` as clear(self)

      def `Swap` as swap(self, other: GeneralMatrix)

    # def AppendGeneralMatrixRows(src: list<GeneralMatrix>) -> GeneralMatrix

    def `FilterSparseMatrixRows` as _filter_sparse_matrix_rows(in: SparseMatrix, keep_rows: list<bool>)
        -> SparseMatrix 

    def `FilterMatrixRows` as _filter_matrix_rows(in: Matrix, keep_rows: list<bool>) -> Matrix:
      return _matrix_wrapper(...)


    def `FilterCompressedMatrixRows` as _filter_compressed_matrix_rows(in: CompressedMatrix, keep_rows: list<bool>)
        -> Matrix:
      return _matrix_wrapper(...)

    def `FilterGeneralMatrixRows` as _filter_general_matrix_rows(
        in: GeneralMatrix, keep_rows: list<bool>) -> GeneralMatrix 

    def `ExtractRowRangeWithPadding` as extract_row_range_with_padding(
        matrix: GeneralMatrix, row_offset: int, num_rows: int) -> GeneralMatrix 

    # Double precision

    class `SparseVector<double>` as DoubleSparseVector:
      

      def `Dim` as __len__(self) -> int

      dim: int = property(`Dim`)
      

      def `Sum` as sum(self) -> float

      def `CopyElementsToVec` as copy_elements_to_vec(self, vec: DoubleVectorBase) 

      def `AddToVec` as add_to_vec(self, alpha: float, vec: DoubleVectorBase)

      def `CopyFromSvec` as copy_from_svec(self, other: DoubleSparseVector)

      @add__init__
      def `SparseVector` as from_other(self, other: DoubleSparseVector)

      def `Swap` as swap_(self, other: DoubleSparseVector) -> self 


      def `Max` as max(self) -> (value: float, index: int)

      def `NumElements` as num_elements(self) -> int

      def `GetElement` as get_elements(self, i: int) -> tuple<int, float> 

      def `SetRandn` as set_randn_(self, zero_prob: float) -> self

      @add__init__
      def `SparseVector` as from_dim(self, dim: int) 
      @add__init__
      def `SparseVector` as from_pairs(self, dim: int,
                                           pairs: list<tuple<int, float>>) 

      def `Resize` as resize_(self, dim: int, resize_type: MatrixResizeType = default) -> self 

      def `Write` as write(self, os: ostream, binary: bool) 

      def `Read` as read_(self, is: istream, binary: bool) -> self 

      def `Scale` as scale(self, alpha: float)

    def `VecSvec` as _vec_svec_double(vec: DoubleVectorBase, svec: DoubleSparseVector) -> float


    class `SparseMatrix<double>` as DoubleSparseMatrix:
      

      def `NumRows` as __len__(self) -> int

      num_rows: int = property(`NumRows`)
      

      num_cols: int = property(`NumCols`)
      

      def `NumElements` as num_elements(self) -> int

      def `Sum` as sum(self) -> float

      def `FrobeniusNorm` as frobenius_norm(self) -> float

      def `CopyToMat` as copy_to_mat(self, other: DoubleMatrixBase, t: MatrixTransposeType = default)

      def `CopyElementsToVec` as copy_elements_to_vec(self, other: DoubleVectorBase) 

      def `CopyFromSmat` as copy_from_smat_(self, other: DoubleSparseMatrix) -> self 

      def `AddToMat` as add_to_mat(self, alpha: float, other: DoubleMatrixBase,
                                   t: MatrixTransposeType = default) 

      @add__init__
      def `SparseMatrix` as from_other(self, other: DoubleSparseMatrix) 

      def `Swap` as swap_(self, other: DoubleSparseMatrix) ->  self

      @add__init__
      def `SparseMatrix` as from_pairs(
          self, dim: int, pairs: list<list<tuple<int, float>>>)

      def `SetRandn` as set_randn_(self, zero_prob: float) -> self 

      def `Write` as write(self, os: ostream, binary: bool) 
      def `Read` as read_(self, is: istream, binary: bool) -> self 

      def `Row` as row(self, r: int) -> DoubleSparseVector

      def `SetRow` as set_row_(self, r: int, vec: DoubleSparseVector) -> self

      # def AppendSparseMatrixRows(self, inputs: list<SparseMatrix>)

      @add__init__
      def `SparseMatrix` as from_dims(self, num_rows: int, num_cols: int) 

      def `Resize` as resize_(self, rows: int, cols: int,
                 resize_type: MatrixResizeType = default) -> self 

      def `Scale` as scale_(self, alpha: float) -> self


    def `TraceMatSmat` as _trace_double_mat_smat(A: DoubleMatrixBase, B: DoubleSparseMatrix,
                                                 trans: MatrixTransposeType = default) -> float 

    def `FilterSparseMatrixRows` as _filter_double_sparse_matrix_rows(in: DoubleSparseMatrix, keep_rows: list<bool>)
        -> DoubleSparseMatrix 
    def `FilterMatrixRows` as _filter_double_matrix_rows(in: DoubleMatrix, keep_rows: list<bool>) -> DoubleMatrix:
 
      return _matrix_wrapper(...)
