from "base/iostream-clifwrap.h" import *
from "matrix/matrix-common-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *

from "matrix/kaldi-matrix.h":
  namespace `kaldi`:
    class `MatrixBase<float>` as MatrixBase:
      

      def `NumRows` as __len__(self) -> int

      num_rows: int = property(`NumRows`)
      

      num_cols: int = property(`NumCols`)
      

      stride: int = property(`Stride`)
      

      def `SizeInBytes` as size_in_bytes(self) -> int

      # NOTE:
      # Data and RowData methods are implemented in Python.

      def `operator()` as _getitem(self, row:int, col:int) -> float


      def `Set` as _setitem_(self, row:int, col:int, value:float)

      def `SetZero` as set_zero_(self) -> self

      def `SetUnit` as set_unit_(self) -> self

      def `SetRandn` as set_randn_(self)-> self

      def `SetRandUniform` as set_rand_uniform_(self)-> self

      def `CopyFromMat` as _copy_from_mat_(
          self, M:MatrixBase, trans:MatrixTransposeType = default) -> self

      # NOTE:
      # These methods are wrapped via shims in kaldi-matrix-ext.{h,clif}.
      #
      # def CopyFromMat(self, M:CompressedMatrix)
      #
      # def CopyFromSp(self, M:SpMatrix)
      #
      # def CopyFromTp(self, M:TpMatrix,
      #                trans:MatrixTransposeType = default)

      # TODO:
      # Wrap these methods by binding to CuMatrix CopyTo* methods in Python.
      #
      # def CopyFromMat(self, M:CuMatrixBase,
      #                 trans:MatrixTransposeType = default)
      #
      # def CopyRowFromCudaVec(self, v:CuVector)

      def `CopyRowsFromVec` as copy_rows_from_vec_(self, v:VectorBase) -> self

      def `CopyColsFromVec` as copy_cols_from_vec_(self, v:VectorBase) -> self

      def `CopyColFromVec` as copy_col_from_vec_(self, v:VectorBase, col:int) -> self

      def `CopyRowFromVec` as copy_row_from_vec_(self, v:VectorBase, row:int) -> self

      def `CopyDiagFromVec` as copy_diag_from_vec_(self, v:VectorBase) -> self

      # NOTE:
      # Row, Range, RowRange, ColRange methods are implemented in Python.

      def `Sum` as sum(self) -> float

      def `Trace` as trace(self, check_square: bool = default) -> float
      def `Max` as max(self) -> float

      def `Min` as min(self) -> float

      def `MulElements` as mul_elements_(self, A: MatrixBase) -> self 

      def `DivElements` as div_elements_(self, A: MatrixBase) -> self 

      def `Scale` as scale_(self, alpha: float) -> self 

      def `Max` as max_with_mat_(self, A: MatrixBase) -> self 

      def `Min` as min_with_mat_(self, A: MatrixBase) -> self 

      def `MulColsVec` as mul_cols_vec_(self, scale: VectorBase) -> self 

      def `MulRowsVec` as mul_rows_vec_(self, scale: VectorBase) -> self 

      def `MulRowsGroupMat` as mul_rows_group_mat_(self, src: MatrixBase) -> self 

      def `LogDet` as log_det(self) -> (log_det: float, det_sign: float)

      # NOTE:
      # Invert, InvertDouble, CopyCols, CopyRows, AddCols, AddRows methods
      # are wrapped via shims defined in kaldi-matrix-ext.h.

      # TODO:
      #
      # void CopyRows(const Real *const *src);
      # void CopyToRows(Real *const *dst) const;
      #
      # void AddRows(Real alpha, const Real *const *src);
      # void AddToRows(Real alpha, Real *const *dst) const;

      def `InvertElements` as invert_elements_(self) -> self

      def `Transpose` as transpose_(self) -> self

      def `ApplyFloor` as apply_floor_(self, floor: float) -> self 

      def `ApplyCeiling` as apply_ceiling_(self, ceiling: float) -> self

      def `ApplyLog` as apply_log_(self) -> self

      def `ApplyExp` as apply_exp_(self) -> self

      def `ApplyPow` as apply_pow_(self, power: float) -> self 

      def `ApplyPowAbs` as apply_pow_abs_(self, power: float,
                                          include_sign: bool = default) -> self 

      def `ApplyHeaviside` as apply_heaviside_(self) -> self

      def `Eig` as _eig(self, P: MatrixBase, eigs_real: VectorBase,
                        eigs_imag: VectorBase) 
      def `Power` as power_(self, pow: float) -> bool 

      def `DestructiveSvd` as _destructive_svd_(
          self, s: VectorBase, U: MatrixBase, Vt: MatrixBase)

      def `Svd` as _svd(self, s: VectorBase, U: MatrixBase, Vt: MatrixBase)

      def `Svd` as _singular_values(self, s: VectorBase)

      def `MinSingularValue` as min_singular_value(self) -> float

      def `Cond` as cond(self) -> float

      def `IsSymmetric` as is_symmetric(self, cutoff: float = default) -> bool

      def `IsDiagonal` as is_diagonal(self, cutoff: float = default) -> bool

      def `IsUnit` as is_unit(self, cutoff: float = default) -> bool

      def `IsZero` as is_zero(self, cutoff: float = default) -> bool 

      def `FrobeniusNorm` as frobenius_norm(self) -> float

      def `ApproxEqual` as _approx_equal(self, other: MatrixBase,
                                         tol: float = default) -> bool

      def `Equal` as equal(self, other: MatrixBase) -> bool

      def `LargestAbsElem` as largest_abs_elem(self) -> float

      def `LogSumExp` as log_sum_exp(self, prune: float = default) -> float

      def `ApplySoftMax` as apply_softmax_(self) -> float 

      def `Sigmoid` as sigmoid_(self, src: MatrixBase) -> self

      def `Heaviside` as heaviside_(self, src: MatrixBase) -> self

      def `SoftHinge` as soft_hinge_(self, src: MatrixBase) -> self

      def `GroupPnorm` as group_pnorm_(self, src: MatrixBase,
                                       power: float) -> self

      def `GroupPnormDeriv` as group_pnorm_deriv_(
          self, input: MatrixBase, output: MatrixBase, power: float) -> self 

      def `GroupMax` as group_max_(self, src: MatrixBase) -> self  

      def `GroupMaxDeriv` as group_max_deriv_(
          self, input: MatrixBase, output: MatrixBase) -> self 

      def `Tanh` as tanh_(self, src: MatrixBase) -> self 

      def `DiffSigmoid` as diff_sigmoid_(self, value: MatrixBase, diff: MatrixBase) -> self

      def `DiffTanh` as diff_tanh_(self, value: MatrixBase, diff: MatrixBase) -> self 

      def `SymPosSemiDefEig` as sym_pos_semi_def_eig(
          self, s: VectorBase, P: MatrixBase, check_thresh: float = default)

      def `Add` as add_(self, alpha: float) -> self 

      def `AddToDiag` as add_to_diag_(self, alpha: float) -> self 

      def `AddVecVec` as add_vec_vec_(self, alpha: float, a: VectorBase,
                                      b: VectorBase) -> self 

      def `AddVecToRows` as add_vec_to_rows_(self, alpha: float,
                                             v: VectorBase) -> self 

      def `AddVecToCols` as add_vec_to_cols_(self, alpha: float,
                                             v: VectorBase) -> self 
      def `AddMat` as _add_mat_(self, alpha: float, M: MatrixBase,
                                transM: MatrixTransposeType = default) -> self 

      def `SymAddMat2` as sym_add_mat2_(self, alpha: float, M: MatrixBase,
                                        transA: MatrixTransposeType,
                                        beta: float) -> self 

      def `AddDiagVecMat` as add_diag_vec_mat_(self, alpha: float,
                                               v: VectorBase, M: MatrixBase,
                                               transM: MatrixTransposeType,
                                               beta: float = default) -> self 

      def `AddMatDiagVec` as add_mat_diag_vec_(
          self, alpha: float, M: MatrixBase, transM: MatrixTransposeType,
          v: VectorBase, beta: float = default) -> self 


      def `AddMatMatElements` as add_mat_mat_elements_(
          self, alpha: float, A: MatrixBase, B: MatrixBase, beta: float) -> self 

      # Note:
      # AddSp method is wrapped via a shim defined in kaldi-matrix-ext.h.

      def `AddMatMat` as _add_mat_mat_(self,
          alpha: float, A: MatrixBase, transA: MatrixTransposeType,
          B: MatrixBase, transB: MatrixTransposeType, beta: float) -> self 

      def `SetMatMatDivMat` as set_mat_mat_div_mat_(self,
          A: MatrixBase, B: MatrixBase, C: MatrixBase) -> self 
      def `AddMatSmat` as _add_mat_smat_(self,
          alpha: float, A: MatrixBase, transA: MatrixTransposeType,
          B: MatrixBase, transB: MatrixTransposeType, beta: float) -> self 

      def `AddSmatMat` as _add_smat_mat_(self,
          alpha: float, A: MatrixBase, transA: MatrixTransposeType,
          B: MatrixBase, transB: MatrixTransposeType, beta: float) -> self 

      def `AddMatMatMat` as add_mat_mat_mat_(self,
          alpha: float, A: MatrixBase, transA: MatrixTransposeType,
          B: MatrixBase, transB: MatrixTransposeType,
          C: MatrixBase, transC: MatrixTransposeType, beta: float) -> self 
      # NOTE:
      # These method are wrapped via shims defined in kaldi-matrix-ext.h
      #
      # def AddSpMat(self, alpha: float, A:SpMatrix, B: MatrixBase,
      #              transB: MatrixTransposeType, beta: float)
      # def AddTpMat(self, alpha: float, A:TpMatrix,
      #              transA: MatrixTransposeType, B: MatrixBase,
      #              transB: MatrixTransposeType, beta: float)
      # def AddMatSp(self, alpha: float, A: MatrixBase,
      #              transA: MatrixTransposeType, B:SpMatrix,
      #              beta: float)
      # def AddMatTp(self, alpha: float, A: MatrixBase,
      #              transA: MatrixTransposeType, B:TpMatrix,
      #              transB: MatrixTransposeType, beta: float)
      # def AddTpTp
      # def AddSpSp

      def `CopyLowerToUpper` as copy_lower_to_upper_(self) -> self 

      def `CopyUpperToLower` as copy_upper_to_lower_(self) -> self 

      def `OrthogonalizeRows` as orthogonalize_rows_(self) -> self 

      def `Read` as read_(self, is: istream, binary: bool, add: bool = default) -> self 

      def `Write` as write(self, os: ostream, binary: bool) 

    # Note: SubMatrix is wrapped manually in matrix-ext.cc

    class `Matrix<float>` as Matrix(MatrixBase):
      

      @add__init__
      def `Matrix` as from_size(self, r:int, c:int,
                                resize_type:MatrixResizeType = default,
                                stride_type:MatrixStrideType = default) 
      # TODO:
      # Wrap this by binding to CuMatrix CopyToMat method in Python.
      #
      # explicit Matrix(const CuMatrixBase<OtherReal> &cu,
      #                 MatrixTransposeType trans = kNoTrans);

      def `Swap` as swap_(self, other: Matrix) -> self 

      @add__init__
      def `Matrix` as from_matrix(self, M: MatrixBase,
                                  trans: MatrixTransposeType = default) 
      # NOTE:
      # These constructors are implemented in Python.
      #
      # @add__init__
      # def `Matrix` as FromSpMatrix(self, M:SpMatrix)
      # @add__init__
      # def `Matrix` as FromCompressedMatrix(self, C:CompressedMatrix)
      # @add__init__
      # def `Matrix` as FromTpMatrix(self, M:TpMatrix, trans:MatrixTransposeType = default)

      def `Read` as read_(self, is: istream, binary: bool, add: bool = default) -> self 

      def `RemoveRow` as _remove_row_(self, index: int) 

      def `Transpose` as transpose_(self) -> self

      def `Resize` as resize_(self, r:int, c:int,
                              resize_type:MatrixResizeType = default,
                              stride_type:MatrixStrideType = default) -> self 

    def `TraceMat` as _trace_mat(A: MatrixBase) -> float 

    def `TraceMatMat` as _trace_mat_mat(A: MatrixBase, B: MatrixBase,
                                        trans: MatrixTransposeType = default) -> float 

    def `TraceMatMatMat` as _trace_mat_mat_mat(
        A: MatrixBase, transA: MatrixTransposeType,
        B: MatrixBase, transB: MatrixTransposeType,
        C: MatrixBase, transC: MatrixTransposeType) -> float 

    def `TraceMatMatMatMat` as _trace_mat_mat_mat_mat(
        A: MatrixBase, transA: MatrixTransposeType,
        B: MatrixBase, transB: MatrixTransposeType,
        C: MatrixBase, transC: MatrixTransposeType,
        D: MatrixBase, transD: MatrixTransposeType) -> float 

    def `ApproxEqual` as _approx_equal_matrix(
        A:MatrixBase, B:MatrixBase, tol:`float` as float = default) -> bool 

    def `AssertEqual` as _assert_equal_matrix(
        A:MatrixBase, B:MatrixBase, tol:`float` as float = default) 

    def `SortSvd` as _sort_svd(s: VectorBase, U: MatrixBase,
                               Vt: MatrixBase = default,
                               sort_on_absolute_value: bool = default)

    def `CreateEigenvalueMatrix` as _create_eigenvalue_matrix(
        real:VectorBase, imag:VectorBase, D:MatrixBase)

    def `SameDim` as _same_dim_matrix(M: MatrixBase, N: MatrixBase) -> bool

    class `MatrixBase<double>` as DoubleMatrixBase:
      

      def `NumRows` as __len__(self) -> int

      num_rows: int = property(`NumRows`)
      

      num_cols: int = property(`NumCols`)
      

      stride: int = property(`Stride`)
      

      def `SizeInBytes` as size_in_bytes(self) -> int

      # NOTE:
      # Data and RowData methods are implemented in Python.

      def `operator()` as _getitem(self, row:int, col:int) -> float 

      def `Set` as _setitem_(self, row:int, col:int, value:float)

      def `SetZero` as set_zero_(self) -> self

      def `SetUnit` as set_unit_(self) -> self 

      def `SetRandn` as set_randn_(self)-> self

      def `SetRandUniform` as set_rand_uniform_(self)-> self

      def `CopyFromMat` as _copy_from_mat_(
          self, M:DoubleMatrixBase, trans:MatrixTransposeType = default) -> self 

      # TODO:
      # These methods are wrapped via shims in kaldi-matrix-ext.{h,clif}.
      #
      # def CopyFromMat(self, M:CompressedMatrix)
      #
      # def CopyFromSp(self, M:SpMatrix)
      #
      # def CopyFromTp(self, M:TpMatrix,
      #                trans:MatrixTransposeType = default)

      # TODO:
      # Wrap these methods by binding to CuMatrix CopyTo* methods in Python.
      #
      # def CopyFromMat(self, M:CuMatrixBase,
      #                 trans:MatrixTransposeType = default)
      #
      # def CopyRowFromCudaVec(self, v:CuVector)

      def `CopyRowsFromVec` as copy_rows_from_vec_(self, v:DoubleVectorBase) -> self 

      def `CopyColsFromVec` as copy_cols_from_vec_(self, v:DoubleVectorBase) -> self 

      def `CopyColFromVec` as copy_col_from_vec_(self, v:DoubleVectorBase, col:int) -> self 

      def `CopyRowFromVec` as copy_row_from_vec_(self, v:DoubleVectorBase, row:int) -> self 

      def `CopyDiagFromVec` as copy_diag_from_vec_(self, v:DoubleVectorBase) -> self 

      # NOTE:
      # Row, Range, RowRange, ColRange methods are implemented in Python.

      def `Sum` as sum(self) -> float

      def `Trace` as trace(self, check_square: bool = default) -> float 

      def `Max` as max(self) -> float

      def `Min` as min(self) -> float

      def `MulElements` as mul_elements_(self, A: DoubleMatrixBase) -> self 

      def `DivElements` as div_elements_(self, A: DoubleMatrixBase) -> self 

      def `Scale` as scale_(self, alpha: float) -> self 

      def `Max` as max_with_mat_(self, A: DoubleMatrixBase) -> self 

      def `Min` as min_with_mat_(self, A: DoubleMatrixBase) -> self 

      def `MulColsVec` as mul_cols_vec_(self, scale: DoubleVectorBase) -> self 


      def `MulRowsVec` as mul_rows_vec_(self, scale: DoubleVectorBase) -> self 

      def `MulRowsGroupMat` as mul_rows_group_mat_(self, src: DoubleMatrixBase) -> self 

      def `LogDet` as log_det(self) -> (log_det: float, det_sign: float) 
      # NOTE:
      # Invert, InvertDouble, CopyCols, CopyRows, AddCols, AddRows methods
      # are wrapped via shims defined in kaldi-matrix-ext.h.

      # TODO:
      #
      # void CopyRows(const Real *const *src);
      # void CopyToRows(Real *const *dst) const;
      #
      # void AddRows(Real alpha, const Real *const *src);
      # void AddToRows(Real alpha, Real *const *dst) const;

      def `InvertElements` as invert_elements_(self) -> self

      def `Transpose` as transpose_(self) -> self

      def `ApplyFloor` as apply_floor_(self, floor: float) -> self 

      def `ApplyCeiling` as apply_ceiling_(self, ceiling: float) -> self 

      def `ApplyLog` as apply_log_(self) -> self

      def `ApplyExp` as apply_exp_(self) -> self

      def `ApplyPow` as apply_pow_(self, power: float) -> self 

      def `ApplyPowAbs` as apply_pow_abs_(self, power: float,
                                          include_sign: bool = default) -> self 

      def `ApplyHeaviside` as apply_heaviside_(self) -> self

      def `Eig` as _eig(self, P: DoubleMatrixBase, eigs_real: DoubleVectorBase,
                        eigs_imag: DoubleVectorBase) 

      def `Power` as power_(self, pow: float) -> bool 

      def `DestructiveSvd` as _destructive_svd_(
          self, s: DoubleVectorBase, U: DoubleMatrixBase, Vt: DoubleMatrixBase) 

      def `Svd` as _svd(self, s: DoubleVectorBase, U: DoubleMatrixBase, Vt: DoubleMatrixBase) 

      def `Svd` as _singular_values(self, s: DoubleVectorBase) 
      def `MinSingularValue` as min_singular_value(self) -> float

      def `Cond` as cond(self) -> float

      def `IsSymmetric` as is_symmetric(self, cutoff: float = default) -> bool 

      def `IsDiagonal` as is_diagonal(self, cutoff: float = default) -> bool 

      def `IsUnit` as is_unit(self, cutoff: float = default) -> bool 

      def `IsZero` as is_zero(self, cutoff: float = default) -> bool

      def `FrobeniusNorm` as frobenius_norm(self) -> float

      def `ApproxEqual` as _approx_equal(self, other: DoubleMatrixBase,
                                         tol: float = default) -> bool 

      def `Equal` as equal(self, other: DoubleMatrixBase) -> bool 

      def `LargestAbsElem` as largest_abs_elem(self) -> float

      def `LogSumExp` as log_sum_exp(self, prune: float = default) -> float 

      def `ApplySoftMax` as apply_softmax_(self) -> float 

      def `Sigmoid` as sigmoid_(self, src: DoubleMatrixBase) -> self 

      def `Heaviside` as heaviside_(self, src: DoubleMatrixBase) -> self 

      def `SoftHinge` as soft_hinge_(self, src: DoubleMatrixBase) -> self 

      def `GroupPnorm` as group_pnorm_(self, src: DoubleMatrixBase,
                                       power: float) -> self 

      def `GroupPnormDeriv` as group_pnorm_deriv_(
          self, input: DoubleMatrixBase, output: DoubleMatrixBase, power: float) -> self 

      def `GroupMax` as group_max_(self, src: DoubleMatrixBase) -> self 

      def `GroupMaxDeriv` as group_max_deriv_(
          self, input: DoubleMatrixBase, output: DoubleMatrixBase) -> self 

      def `Tanh` as tanh_(self, src: DoubleMatrixBase) -> self 

      def `DiffSigmoid` as diff_sigmoid_(self, value: DoubleMatrixBase, diff: DoubleMatrixBase) -> self 

      def `DiffTanh` as diff_tanh_(self, value: DoubleMatrixBase, diff: DoubleMatrixBase) -> self
      

      def `SymPosSemiDefEig` as sym_pos_semi_def_eig(
          self, s: DoubleVectorBase, P: DoubleMatrixBase, check_thresh: float = default) 

      def `Add` as add_(self, alpha: float) -> self 

      def `AddToDiag` as add_to_diag_(self, alpha: float) -> self 

      def `AddVecVec` as add_vec_vec_(self, alpha: float, a: DoubleVectorBase,
                                      b: DoubleVectorBase) -> self 

      def `AddVecToRows` as add_vec_to_rows_(self, alpha: float,
                                             v: DoubleVectorBase) -> self 

      def `AddVecToCols` as add_vec_to_cols_(self, alpha: float,
                                             v: DoubleVectorBase) -> self 

      def `AddMat` as _add_mat_(self, alpha: float, M: DoubleMatrixBase,
                                transM: MatrixTransposeType = default) -> self 

      def `SymAddMat2` as sym_add_mat2_(self, alpha: float, M: DoubleMatrixBase,
                                        transA: MatrixTransposeType,
                                        beta: float) -> self 

      def `AddDiagVecMat` as add_diag_vec_mat_(self, alpha: float,
                                               v: DoubleVectorBase, M: DoubleMatrixBase,
                                               transM: MatrixTransposeType,
                                               beta: float = default) -> self 

      def `AddMatDiagVec` as add_mat_diag_vec_(
          self, alpha: float, M: DoubleMatrixBase, transM: MatrixTransposeType,
          v: DoubleVectorBase, beta: float = default) -> self 


      def `AddMatMatElements` as add_mat_mat_elements_(
          self, alpha: float, A: DoubleMatrixBase, B: DoubleMatrixBase, beta: float) -> self 

      # Note:
      # AddSp method is wrapped via a shim defined in kaldi-matrix-ext.h.

      def `AddMatMat` as _add_mat_mat_(self,
          alpha: float, A: DoubleMatrixBase, transA: MatrixTransposeType,
          B: DoubleMatrixBase, transB: MatrixTransposeType, beta: float) -> self 

      def `SetMatMatDivMat` as set_mat_mat_div_mat_(self,
          A: DoubleMatrixBase, B: DoubleMatrixBase, C: DoubleMatrixBase) -> self 

      def `AddMatSmat` as _add_mat_smat_(self,
          alpha: float, A: DoubleMatrixBase, transA: MatrixTransposeType,
          B: DoubleMatrixBase, transB: MatrixTransposeType, beta: float) -> self 

      def `AddSmatMat` as _add_smat_mat_(self,
          alpha: float, A: DoubleMatrixBase, transA: MatrixTransposeType,
          B: DoubleMatrixBase, transB: MatrixTransposeType, beta: float) -> self 

      def `AddMatMatMat` as add_mat_mat_mat_(self,
          alpha: float, A: DoubleMatrixBase, transA: MatrixTransposeType,
          B: DoubleMatrixBase, transB: MatrixTransposeType,
          C: DoubleMatrixBase, transC: MatrixTransposeType, beta: float) -> self 

      # TODO:
      # These method are wrapped via shims defined in kaldi-matrix-ext.h
      #
      # def AddSpMat(self, alpha: float, A:SpDoubleMatrix,
      #              B: DoubleMatrixBase, transB: MatrixTransposeType,
      #              beta: float)
      # def AddTpMat(self, alpha: float, A:TpDoubleMatrix,
      #              transA: MatrixTransposeType, B: DoubleMatrixBase,
      #              transB: MatrixTransposeType, beta: float)
      # def AddMatSp(self, alpha: float, A: DoubleMatrixBase,
      #              transA: MatrixTransposeType, B:SpDoubleMatrix,
      #              beta: float)
      # def AddMatTp(self, alpha: float, A: DoubleMatrixBase,
      #              transA: MatrixTransposeType, B:TpDoubleMatrix,
      #              transB: MatrixTransposeType, beta: float)
      # def AddTpTp
      # def AddSpSp

      def `CopyLowerToUpper` as copy_lower_to_upper_(self) -> self 

      def `CopyUpperToLower` as copy_upper_to_lower_(self) -> self 

      def `OrthogonalizeRows` as orthogonalize_rows_(self) -> self 

      def `Read` as read_(self, is: istream, binary: bool, add: bool = default) -> self 

      def `Write` as write(self, os: ostream, binary: bool) 

    # Note: SubMatrix is wrapped manually in matrix-ext.cc

    class `Matrix<double>` as DoubleMatrix(DoubleMatrixBase):
      

      @add__init__
      def `Matrix` as from_size(self, r:int, c:int,
                                resize_type:MatrixResizeType = default,
                                stride_type:MatrixStrideType = default) 

      # TODO:
      # Wrap this by binding to CuMatrix CopyToMat method in Python.
      #
      # explicit Matrix(const CuMatrixBase<OtherReal> &cu,
      #                 MatrixTransposeType trans = kNoTrans);

      def `Swap` as swap_(self, other: DoubleMatrix) -> self 
      # TODO:
      # Wrap this by binding to CuMatrix Swap method in Python.
      #
      # void Swap(CuMatrix<Real> *mat);

      @add__init__
      def `Matrix` as from_matrix(self, M: DoubleMatrixBase,
                                  trans: MatrixTransposeType = default) 
      # NOTE:
      # These constructors are implemented in Python.
      #
      # @add__init__
      # def `Matrix` as FromSpMatrix(self, M:DoubleSpMatrix)
      # @add__init__
      # def `Matrix` as FromCompressedMatrix(self, C:CompressedMatrix)
      # @add__init__
      # def `Matrix` as FromTpMatrix(self, M:DoubleTpMatrix, trans:MatrixTransposeType = default)

      def `Read` as read_(self, is: istream, binary: bool, add: bool = default) -> self 

      def `RemoveRow` as _remove_row_(self, index: int) 

      def `Transpose` as transpose_(self) -> self

      def `Resize` as resize_(self, r:int, c:int,
                              resize_type:MatrixResizeType = default,
                              stride_type:MatrixStrideType = default) -> self

    def `TraceMat` as _trace_double_mat(A: DoubleMatrixBase) -> float 


    def `TraceMatMat` as _trace_double_mat_mat(
        A: DoubleMatrixBase, B: DoubleMatrixBase,
        trans:MatrixTransposeType = default) -> float


    def `TraceMatMatMat` as _trace_double_mat_mat_mat(
        A: DoubleMatrixBase, transA: MatrixTransposeType,
        B: DoubleMatrixBase, transB: MatrixTransposeType,
        C: DoubleMatrixBase, transC: MatrixTransposeType) -> float 

    def `TraceMatMatMatMat` as _trace_double_mat_mat_mat_mat(
        A: DoubleMatrixBase, transA: MatrixTransposeType,
        B: DoubleMatrixBase, transB: MatrixTransposeType,
        C: DoubleMatrixBase, transC: MatrixTransposeType,
        D: DoubleMatrixBase, transD: MatrixTransposeType) -> float 

    def `ApproxEqual` as _approx_equal_double_matrix(
         A:DoubleMatrixBase, B:DoubleMatrixBase,
         tol:`double` as float = default) -> bool 

    def `AssertEqual` as _assert_equal_double_matrix(
        A:DoubleMatrixBase, B:DoubleMatrixBase,
        tol:`double` as float = default) 
    def `SortSvd` as _sort_double_svd(s: DoubleVectorBase, U: DoubleMatrixBase,
                                      Vt: DoubleMatrixBase = default,
                                      sort_on_absolute_value: bool = default) 

    def `CreateEigenvalueMatrix` as _create_eigenvalue_double_matrix(
        real:DoubleVectorBase, imag:DoubleVectorBase, D:DoubleMatrixBase) 


    def `SameDim` as _same_dim_double_matrix(M: DoubleMatrixBase,
                                             N: DoubleMatrixBase) -> bool 

    class HtkHeader:
      
      mNSamples: int
      mSamplePeriod: int
      mSampleSize: int
      mSampleKind: int

    def `ReadHtk` as read_htk(is: istream, M: Matrix, header: HtkHeader) -> bool

    def `WriteHtk` as write_htk(os: ostream , M: MatrixBase, header: HtkHeader) -> bool

    def `WriteSphinx` as write_sphinx(os: ostream, M: MatrixBase) -> bool
