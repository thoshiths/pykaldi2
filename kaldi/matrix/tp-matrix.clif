from "matrix/matrix-common-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "matrix/kaldi-matrix-clifwrap.h" import *
from "matrix/sp-matrix-clifwrap.h" import *
from "matrix/matrix-ext.h" import *

from kaldi.matrix._packed_matrix import PackedMatrix
from kaldi.matrix._packed_matrix import DoublePackedMatrix

from "matrix/tp-matrix.h":
  namespace `kaldi`:
    class `TpMatrix<float>` as TpMatrix(PackedMatrix):

      @add__init__
      def `TpMatrix` as from_size(self, r:int,
                                  resize_type: MatrixResizeType = default) 

      @add__init__
      def `TpMatrix` as from_other(self, orig:TpMatrix) 

      # TODO:
      # def `TpMatrix` as WithCU(cu:CuTpMatrix)

      def `operator()` as getitem(self, r: int, c: int) -> float 

      def `Cholesky` as cholesky_(self, orig:SpMatrix) -> self 

      def `Invert` as invert_(self) -> self

      def `InvertDouble` as invert_double_(self) -> self

      def `Swap` as swap_with_triangular_(self, other: TpMatrix) -> self 

      def `Determinant` as determinant(self) -> float

      def `CopyFromMat` as copy_from_mat_(self, M:MatrixBase,
                                          trans:MatrixTransposeType = default) 

      def `CopyFromTp` as copy_from_tp_(self, other:TpMatrix) 

      def `AddTp` as add_tp(self, alpha: float, M:TpMatrix) 

    class `TpMatrix<double>` as DoubleTpMatrix(DoublePackedMatrix):
      

      @add__init__
      def `TpMatrix` as from_size(self, r:int,
                                  resize_type: MatrixResizeType = default) 
      @add__init__
      def `TpMatrix` as from_other(self, orig:DoubleTpMatrix) 
      # TODO:
      # def `TpMatrix` as WithCU(cu:CuTpMatrix)

      def `operator()` as getitem(self, r: int, c: int) -> float 

      def `Cholesky` as cholesky_(self, orig:DoubleSpMatrix) -> self 
      def `Invert` as invert_(self) -> self

      def `InvertDouble` as invert_double_(self) -> self

      def `Swap` as swap_with_triangular_(self, other: DoubleTpMatrix) -> self 

      def `Determinant` as determinant(self) -> float

      def `CopyFromMat` as copy_from_mat_(self, M:DoubleMatrixBase,
                                          trans:MatrixTransposeType = default) 

      def `CopyFromTp` as copy_from_tp_(self, other:DoubleTpMatrix) 

      def `AddTp` as add_tp(self, alpha: float, M:DoubleTpMatrix) 