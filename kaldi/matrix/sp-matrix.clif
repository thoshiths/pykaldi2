from "matrix/matrix-common-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "matrix/kaldi-matrix-clifwrap.h" import *
from "matrix/matrix-ext.h" import *

from kaldi.matrix._packed_matrix import PackedMatrix
from kaldi.matrix._packed_matrix import DoublePackedMatrix

from "matrix/sp-matrix.h":
  namespace `kaldi`:
    class `SpMatrix<float>` as SpMatrix(PackedMatrix):
      

      @add__init__
      def `SpMatrix` as from_size(self, r:int,
                                  resize_type: MatrixResizeType = default) 

      @add__init__
      def `SpMatrix` as from_other(self, orig:SpMatrix) 
      @add__init__
      def `SpMatrix` as from_matrix(self, orig: MatrixBase,
                                    copy_type: SpCopyType = default) 

      def `Swap` as swap_with_symmetric_(self, other: SpMatrix) -> self 

      def `CopyFromSp` as copy_from_sp_(self, other:SpMatrix) -> self 

      def `CopyFromMat` as copy_from_mat_(self, orig:MatrixBase,
                                          copy_type:SpCopyType = default) -> self 

      def `operator()` as getitem(self, r: int, c: int) -> float 

      def `Invert` as invert_(self) -> self

      def `InvertDouble` as invert_double_(self) -> self

      def `Cond` as cond(self) -> float

      def `ApplyPow` as apply_pow_(self, exponent: float) -> self 
        # TODO:
        # Need C++ shims for these.
        # def `SymPosSemiDefEig` as sym_pos_semi_def_eig(self, s: VectorBase, P:MatrixBase,
        #                      tolerance:float = default)
        #
        # def `Eig` as eig(self, s: VectorBase, P: MatrixBase = default)
        #
        # def `TopEigs` as top_eigs(self, s: VectorBase, P: MatrixBase,
        #             lanczos_dim: int = default)


      def `MaxAbsEig` as max_abs_eig(self) -> float

      # TODO: Implement in Python
      # def PrintEigs(self, name:str)

      def `IsPosDef` as is_pos_def(self) -> bool

      def `AddSp` as add_sp_(self, alpha:float, Ma:SpMatrix) -> self 

      def `LogPosDefDet` as log_pos_def_det(self) -> float 

      # TODO: Implement C++ wrapper
      # def LogDet(self) -> (logdet: float, det_sign: float)

      def `AddVec2` as add_vec2_(self, alpha: float, v: VectorBase) -> self 

      def `AddVecVec` as add_vec_vec_(self, alpha: float, v: VectorBase, w:VectorBase) -> self 

      def `AddVec2Sp` as add_vec_2_sp_(self, alpha: float, v: VectorBase, S:SpMatrix, beta: float) -> self 

      def `AddDiagVec` as add_diag_vec_(self, alpha: float, v:VectorBase) -> self 

      def `AddMat2` as add_mat2_(self, alpha: float, M: MatrixBase,
                                 transM: MatrixTransposeType, beta: float) -> self 

      def `AddMat2Sp` as add_mat_2_sp_(
          self, alpha: float, M: MatrixBase, transM: MatrixTransposeType,
          A:SpMatrix, beta: float = default) -> self 

      def `AddSmat2Sp` as add_smat_2_sp_(
          self, alpha: float, M:MatrixBase, transM:MatrixTransposeType,
          A:SpMatrix, beta: float = default) -> self

      # FIXME in sp-matrix-ext.h
      # def AddTp2Sp(self, alpha:float, T:TpMatrix,
      #              transM: MatrixTransposeType, A:SpMatrix,
      #              beta: float = default)
      # def AddTp2(self, alpha: float, T:TpMatrix,
      #            transM: MatrixTransposeType, beta:float = default)

      def `AddMat2Vec` as add_mat_2_vec_(
          self, alpha:float, M:MatrixBase, transM:MatrixTransposeType,
          v:VectorBase, beta: float = default) -> self 

      def `ApplyFloor` as apply_floor_matrix_(
          self, floor:SpMatrix, alpha: float = default, verbose: bool = default) -> int 
      def `ApplyFloor` as apply_floor_(self, floor:float) -> int 

      def `IsDiagonal` as is_diagonal(self, cutoff:float = default) -> bool 
      def `IsUnit` as is_unit(self, cutoff:float = default) -> bool 
      def `IsZero` as is_zero(self, cutoff:float = default) -> bool

      def `IsTridiagonal` as is_triagonal(self, cutoff:float = default) -> bool 

      def `FrobeniusNorm` as frobenius_norm(self) -> float

      def `ApproxEqual` as approx_equal(self, other:SpMatrix, tol:float = default) -> bool 

      def `LimitCond` as limit_cond(self, maxCond: float = default,
                                    invert:bool = default) -> int 

      def `LimitCondDouble` as limit_cond_double(self, maxCond: float = default,
                                                 invert: bool = default) -> int

      def `Trace` as trace(self) -> float

      def `Tridiagonalize` as tridiagonalize_(self, Q:MatrixBase) -> self 

      def `Qr` as qr_(self, Q:MatrixBase) 

    class `SpMatrix<double>` as DoubleSpMatrix(DoublePackedMatrix):
      

      @add__init__
      def `SpMatrix` as from_size(self, r:int,
                                  resize_type: MatrixResizeType = default) 

      @add__init__
      def `SpMatrix` as from_other(self, orig:DoubleSpMatrix) 

      @add__init__
      def `SpMatrix` as from_matrix(self, orig: DoubleMatrixBase,
                                    copy_type: SpCopyType = default) 

      def `Swap` as swap_with_symmetric_(self, other: DoubleSpMatrix) -> self 

      def `CopyFromSp` as copy_from_sp_(self, other:DoubleSpMatrix) -> self 

      def `CopyFromMat` as copy_from_mat_(self, orig:DoubleMatrixBase,
                                          copy_type:SpCopyType = default) -> self 

      def `operator()` as getitem(self, r: int, c: int) -> float 

      def `Invert` as invert_(self) -> self

      def `InvertDouble` as invert_double_(self) -> self

      def `Cond` as cond(self) -> float

      def `ApplyPow` as apply_pow_(self, exponent: float) -> self 
        # TODO:
        # Need C++ shims for these.
        # def `SymPosSemiDefEig` as sym_pos_semi_def_eig(self, s: VectorBase, P:MatrixBase,
        #                      tolerance:float = default)
        #
        # def `Eig` as eig(self, s: VectorBase, P: MatrixBase = default)
        #
        # def `TopEigs` as top_eigs(self, s: VectorBase, P: MatrixBase,
        #             lanczos_dim: int = default)


      def `MaxAbsEig` as max_abs_eig(self) -> float

      # TODO: Implement in Python
      # def PrintEigs(self, name:str)

      def `IsPosDef` as is_pos_def(self) -> bool

      def `AddSp` as add_sp_(self, alpha:float, Ma:DoubleSpMatrix) -> self 
      def `LogPosDefDet` as log_pos_def_det(self) -> float 
      # TODO: Implement C++ wrapper
      # def LogDet(self) -> (logdet: float, det_sign: float)

      def `AddVec2` as add_vec2_(self, alpha: float, v: DoubleVectorBase) -> self 

      def `AddVecVec` as add_vec_vec_(
          self, alpha: float, v: DoubleVectorBase, w:DoubleVectorBase) -> self 

      def `AddVec2Sp` as add_vec_2_sp_(
          self, alpha: float, v: DoubleVectorBase, S:DoubleSpMatrix, beta: float) -> self

      def `AddDiagVec` as add_diag_vec_(self, alpha: float, v:DoubleVectorBase) -> self 

      def `AddMat2` as add_mat2_(self, alpha: float, M: DoubleMatrixBase,
                                 transM: MatrixTransposeType, beta: float) -> self 

      def `AddMat2Sp` as add_mat_2_sp_(
          self, alpha: float, M: DoubleMatrixBase, transM: MatrixTransposeType,
          A:DoubleSpMatrix, beta: float = default) -> self 

      def `AddSmat2Sp` as add_smat_2_sp_(
          self, alpha: float, M:DoubleMatrixBase, transM:MatrixTransposeType,
          A:DoubleSpMatrix, beta: float = default) -> self

      # FIXME in sp-matrix-ext.h
      # def AddTp2Sp(self, alpha:float, T:TpMatrix,
      #              transM: MatrixTransposeType, A:SpMatrix,
      #              beta: float = default)
      # def AddTp2(self, alpha: float, T:TpMatrix,
      #            transM: MatrixTransposeType, beta:float = default)

      def `AddMat2Vec` as add_mat_2_vec_(
          self, alpha:float, M:DoubleMatrixBase, transM:MatrixTransposeType,
          v:DoubleVectorBase, beta: float = default) -> self 

      def `ApplyFloor` as apply_floor_matrix_(
          self, floor:DoubleSpMatrix, alpha: float = default, verbose: bool = default) -> int 

      def `ApplyFloor` as apply_floor_(self, floor:float) -> int 

      def `IsDiagonal` as is_diagonal(self, cutoff:float = default) -> bool 

      def `IsUnit` as is_unit(self, cutoff:float = default) -> bool 

      def `IsZero` as is_zero(self, cutoff:float = default) -> bool

      def `IsTridiagonal` as is_triagonal(self, cutoff:float = default) -> bool 
      def `FrobeniusNorm` as frobenius_norm(self) -> float

      def `ApproxEqual` as approx_equal(self, other:DoubleSpMatrix, tol:float = default) -> bool 

      def `LimitCond` as limit_cond(self, maxCond: float = default,
                                    invert:bool = default) -> int 

      def `LimitCondDouble` as limit_cond_double(self, maxCond: float = default,
                                                 invert: bool = default) -> int

      def `Trace` as trace(self) -> float

      def `Tridiagonalize` as tridiagonalize_(self, Q:DoubleMatrixBase) -> self 

      def `Qr` as qr_(self, Q:DoubleMatrixBase) 

    def `TraceSpSp` as _trace_sp_sp(A:SpMatrix, B:SpMatrix) -> float 

    def `TraceSpSp` as _trace_double_sp_sp(A:DoubleSpMatrix,
                                           B:DoubleSpMatrix) -> float

    def `ApproxEqual` as _approx_equal_sp_matrix(
        A:SpMatrix, B:SpMatrix, tol:`float` as float = default) -> bool 

    def `AssertEqual` as _assert_equal_sp_matrix(A:SpMatrix, B:SpMatrix,
                                                 tol:`float` as float = default) 

    def `TraceSpSpLower` as _trace_sp_sp_lower(A:SpMatrix, B:SpMatrix) -> float

    def `TraceSpSpLower` as _trace_double_sp_sp_lower(A:DoubleSpMatrix, B:DoubleSpMatrix) -> float

    def `TraceSpMat` as _trace_sp_mat(A:SpMatrix, B:MatrixBase) -> float

    def `TraceMatSpMat` as _trace_mat_sp_mat(A:MatrixBase, transA:MatrixTransposeType, B:SpMatrix,
                      C:MatrixBase, transC: MatrixTransposeType) -> float 

    def `TraceMatSpMat` as _trace_double_mat_sp_mat(
        A:DoubleMatrixBase, transA:MatrixTransposeType, B:DoubleSpMatrix,
        C:DoubleMatrixBase, transC: MatrixTransposeType) -> float 

    def `TraceMatSpMatSp` as _trace_mat_sp_mat_sp(
        A:MatrixBase, transA:MatrixTransposeType, B:SpMatrix,
        C:MatrixBase, transC:MatrixTransposeType, D:SpMatrix) -> float 

    def `TraceMatSpMatSp` as _trace_double_mat_sp_mat_sp(
        A:DoubleMatrixBase, transA:MatrixTransposeType, B:DoubleSpMatrix,
        C:DoubleMatrixBase, transC:MatrixTransposeType, D:DoubleSpMatrix) -> float 

    def `VecSpVec` as _vec_sp_vec(v1:VectorBase, M:SpMatrix, v2:VectorBase) -> float 

    def `VecSpVec` as _vec_sp_vec_double(v1:DoubleVectorBase, M:DoubleSpMatrix, v2:DoubleVectorBase) -> float 

    class SolverOptions:
      

      K:float
      eps:float
      name:str
      optimize_delta:bool
      diagonal_precondition:bool
      print_debug_output:bool

      @add__init__
      def `SolverOptions` as solver_options_with_name(self, name:str) 

      def `Check` as check(self)

    def `SolveQuadraticProblem` as solve_quadratic_problem(H:SpMatrix, g:VectorBase, opts:SolverOptions,
                              x:VectorBase) -> float 

    def `SolveQuadraticMatrixProblem` as solve_quadratic_matrix_problem(Q:SpMatrix, Y:MatrixBase, P:SpMatrix,
                                    opts:SolverOptions, M:MatrixBase) -> float 

    def `SolveDoubleQuadraticMatrixProblem` as solve_double_quadratic_matrix_problem(
        G:MatrixBase, P1:SpMatrix, P2:SpMatrix, Q1:SpMatrix, Q2:SpMatrix,
        opts:SolverOptions, M:MatrixBase) -> float 
