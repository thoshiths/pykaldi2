from "base/iostream-clifwrap.h" import *
from "matrix/matrix-common-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "matrix/kaldi-matrix-clifwrap.h" import *
from "matrix/matrix-ext.h" import *

from "matrix/packed-matrix.h":
  namespace `kaldi`:
    class `PackedMatrix<float>` as PackedMatrix:
      

      num_rows: int = property(`NumRows`)
      
      num_cols: int = property(`NumCols`)
      

      @add__init__
      def `PackedMatrix` as from_size(
          self, r:int, resize_type: MatrixResizeType = default)

      @add__init__
      def `PackedMatrix` as from_other(self, orig: PackedMatrix)

      def `SetZero` as set_zero_(self) -> self

      def `SetUnit` as set_unit_(self) -> self

      def `SetRandn` as set_randn_(self)-> self

      def `Trace` as trace(self) -> float

      def `Resize` as resize_(self, num_rows:int,
                              resize_type: MatrixResizeType = default) -> self

      def `AddToDiag` as add_to_diag_(self, r: float) -> self 

      def `ScaleDiag` as scale_diag_(self, alpha: float) -> self 

      def `SetDiag` as set_diag_(self, alpha: float) -> self 

      def `CopyFromPacked` as copy_from_packed_(self, orig: PackedMatrix) -> self 

      def `CopyFromVec` as copy_from_vec_(self, orig: SubVector) -> self 

      def `NumRows` as __len__(self) -> int

      def `SizeInBytes` as size_in_bytes(self) -> int

      def `operator()` as getitem(self, r: int, c: int) -> float 

      def `Max` as max(self) -> float

      def `Min` as min(self) -> float

      def `Scale` as scale_(self, c:float) -> self 

      def `Read` as read_(self, is: istream, binary: bool, add: bool = default) -> self 

      def `Write` as write(self, os: ostream, binary: bool) 

      def `Swap` as swap_with_packed_(self, other: PackedMatrix) -> self 

      def `Swap` as swap_with_matrix_(self, other: Matrix) -> self 

    class `PackedMatrix<double>` as DoublePackedMatrix:
      

      num_rows: int = property(`NumRows`)
      
      num_cols: int = property(`NumCols`)
      

      @add__init__
      def `PackedMatrix` as from_size(
          self, r:int, resize_type: MatrixResizeType = default) 

      @add__init__
      def `PackedMatrix` as from_other(self, orig: DoublePackedMatrix) 

      def `SetZero` as set_zero_(self) -> self

      def `SetUnit` as set_unit_(self) -> self

      def `SetRandn` as set_randn_(self)-> self

      def `Trace` as trace(self) -> float

      def `Resize` as resize_(self, num_rows:int,
                              resize_type: MatrixResizeType = default) -> self 

      def `AddToDiag` as add_to_diag_(self, r: float) -> self 

      def `ScaleDiag` as scale_diag_(self, alpha: float) -> self 

      def `SetDiag` as set_diag_(self, alpha: float) -> self 
      def `CopyFromPacked` as copy_from_packed_(self, orig: DoublePackedMatrix) -> self 

      def `CopyFromVec` as copy_from_vec_(self, orig: DoubleSubVector) -> self 
      def `NumRows` as __len__(self) -> int

      def `SizeInBytes` as size_in_bytes(self) -> int

      def `operator()` as getitem(self, r: int, c: int) -> float 

      def `Max` as max(self) -> float

      def `Min` as min(self) -> float

      def `Scale` as scale_(self, c:float) -> self 
      def `Read` as read_(self, is: istream, binary: bool, add: bool = default) -> self 

      def `Write` as write(self, os: ostream, binary: bool) 
      def `Swap` as swap_with_packed_(self, other: DoublePackedMatrix) -> self 

      def `Swap` as swap_with_matrix_(self, other: DoubleMatrix) -> self 