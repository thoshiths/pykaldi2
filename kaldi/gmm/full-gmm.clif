from "base/iostream-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "matrix/kaldi-matrix-clifwrap.h" import *
from "matrix/sp-matrix-clifwrap.h" import *
from "gmm/model-common-clifwrap.h" import *

from kaldi.matrix._matrix import _vector_wrapper
from kaldi.matrix._matrix import _matrix_wrapper

from "gmm/full-gmm.h":
  namespace `kaldi`:
    class FullGmm:
      @add__init__
      def `FullGmm` as from_other(self, gmm: FullGmm)

      @add__init__
      def `FullGmm` as from_nmix_dim(self, nmix:int, dim: int)

      def `Resize` as resize(self, nmix: int, dim: int)

      def `NumGauss` as num_gauss(self) -> int

      def `Dim` as dim(self) -> int

      def `CopyFromFullGmm` as copy_from_full(self, fullgmm: FullGmm)

      # def CopyFromDiagGmm(self, diaggmm: DiagGmm)

      def `LogLikelihood` as log_likelihood(self, data: VectorBase) -> float 
      def `LogLikelihoods` as log_likelihoods(self, data:VectorBase) -> Vector:

        return _vector_wrapper(...)

      def `LogLikelihoodsPreselect` as log_likelihoods_preselect(self, data:VectorBase, indices:list<int>) -> Vector:

        return _vector_wrapper(...)

      def `GaussianSelection` as gaussian_selection(self, data: VectorBase, num_gselect: int) -> (log_like: float, output: list<int>)

      def `GaussianSelectionPreselect` as gaussian_selection_preselect(self, data: VectorBase, preselect: list<int>, num_gselect: int) -> (log_like: float, posteriors: list<int>)

      def `ComponentPosteriors` as _component_posteriors(self, data:VectorBase, posterior:VectorBase) -> float 

      def `ComponentLogLikelihood` as component_log_likelihood(self, data: VectorBase, comp_id: int) -> float 
      def `ComputeGconsts` as compute_gconsts(self) -> int 
      def `Split` as split(self, target_components: int, perturb_factor: float) -> list<int>

      def `Perturb` as perturb(self, perturb_factor: float)

      def `Merge` as merge(self, target_components: int) -> list<int> 

      def `MergePreselect` as merge_preselect(self, target_components: int, preselect_pairs: list<tuple<int, int>>) -> float 

      def `Write` as write(self, os: ostream, binary: bool)

      def `Read` as read(self, is: istream, binary: bool)

      def `Interpolate` as interpolate(self, rho: float, source: FullGmm, flags: int = default) 

      def gconsts(self) -> Vector
        return _vector_wrapper(...)

      def weights(self) -> Vector
        return _vector_wrapper(...)

      def means_invcovars(self) -> Matrix
        return _matrix_wrapper(...)

      def `inv_covars` as _inv_covars(self) -> list<SpMatrix>

      def `SetWeights` as _set_weights(self, w: Vector)

      def `SetMeans` as _set_means(self, m: Matrix)

      def `SetInvCovarsAndMeans` as set_inv_covars_and_means(self, invcovars:list<SpMatrix>, means:Matrix) 
      def `SetInvCovarsAndMeansInvCovars` as set_inv_covars_and_means_inv_covars(self, invcovars:list<SpMatrix>, means_invcovars:Matrix)

      def `SetInvCovars` as set_inv_covars(self, v: list<SpMatrix>)

      def `GetCovars` as _get_covars(self) -> list<SpMatrix>

      def `GetMeans` as get_means(self) -> Matrix
        return _matrix_wrapper(...)

      def `GetCovarsAndMeans` as _get_covars_and_means(self) -> (covars:list<SpMatrix>, means: Matrix)

      def `RemoveComponent` as remove_component(self, gauss: int, renorm_weights: bool)

      def `RemoveComponents` as remove_components(self, gauss: list<int>, renorm_weights: bool)

      def `GetComponentMean` as get_component_mean(self, gauss: int, out: VectorBase)
