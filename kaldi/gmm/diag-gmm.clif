from "base/iostream-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "matrix/kaldi-matrix-clifwrap.h" import *
from "gmm/full-gmm-clifwrap.h" import *
from "tree/clusterable-classes-clifwrap.h" import *

from kaldi.matrix._matrix import _vector_wrapper
from kaldi.matrix._matrix import _matrix_wrapper

from "gmm/diag-gmm.h":
  namespace `kaldi`:
    class DiagGmm:
      @add__init__
      def `DiagGmm` as from_other(self, gmm: DiagGmm)

      @add__init__
      def `DiagGmm` as from_clusterable(self, gc: GaussClusterable,
                                        var_floor: float)

      # def CopyFromNormal(self, diag_gmm_normal: DiagGmmNormal)

      @add__init__
      def `DiagGmm` as from_nmix_dim(self, nmix: int, dim: int)

      # FIXME: CLIF is confused
      # @add__init__
      # def `DiagGmm` as from_components(self, gmms: list<tuple<float, DiagGmm>>)

      def `Resize` as resize(self, nmix: int, dim: int)

      def `NumGauss` as num_gauss(self) -> int

      def `Dim` as dim(self) -> int

      def `CopyFromDiagGmm` as copy_from_diag(self, diaggmm: DiagGmm)

      def `CopyFromFullGmm` as copy_from_full(self, fullgmm: FullGmm)

      def `LogLikelihood` as log_likelihood(self, data: VectorBase) -> float

      def `LogLikelihoods` as log_likelihoods(self, data: VectorBase) -> Vector:

        return _vector_wrapper(...)

      def `LogLikelihoods` as log_likelihoods_matrix(self, data: MatrixBase) -> Matrix:
        
        return _matrix_wrapper(...)

      def `LogLikelihoodsPreselect` as log_likelihoods_preselect(self, data: VectorBase, indices: list<int>) -> Vector:
        
        return _vector_wrapper(...)

      def `GaussianSelection` as gaussian_selection(self, data: VectorBase, num_gselect: int) -> (log_like: float, output: list<int>)
        

      def `GaussianSelection` as gaussian_selection_matrix(self, data: MatrixBase, num_gselect: int) -> (log_like: float, output: list<list<int>>)

      def `GaussianSelectionPreselect` as gaussian_selection_preselect(self, data: VectorBase, preselect: list<int>, num_gselect: int) -> (log_like: float, output: list<int>)

      def `ComponentPosteriors` as _component_posteriors(self, data: VectorBase, posteriors: Vector) -> float 

      def `ComponentLogLikelihood` as component_log_likelihood(self, data: VectorBase, comp_id: int) -> float

      def `ComputeGconsts` as compute_gconsts(self) -> int

      def `Generate` as generate(self, output: VectorBase) 

      def `Split` as split(self, target_components: int, perturb_factor: float) -> list<int>

      def `Perturb` as perturb(self, perturb_factor: float)

      def `Merge` as merge(self, target_components: int) -> list<int>

      # def MergeKmeans(self, target_components: int,
      #                 cfg: ClusterKMeansOptions = default)

      def `Write` as write(self, os: ostream, binary: bool)

      def `Read` as read(self, is: istream, binary: bool)

      def `Interpolate` as interpolate(self, rho: float, source: DiagGmm, flags: int = default)

      def `Interpolate` as interpolate_full(self, rho: float, source: FullGmm, flags: int = default)

      def gconsts(self) -> Vector:
        
        return _vector_wrapper(...)

      def weights(self) -> Vector:
        
        return _vector_wrapper(...)

      def means_invvars(self) -> Matrix:
        
        return _matrix_wrapper(...)

      def inv_vars(self) -> Matrix:
        
        return _matrix_wrapper(...)

      def valid_gconsts(self) -> bool

      def `RemoveComponent`as remove_component(self, gauss: int, renorm_weights: bool)

      def `RemoveComponents` as remove_components(self, gauss: list<int>, renorm_weights: bool)

      def `SetWeights` as set_weights(self, w: VectorBase)

      def `SetMeans` as set_means(self, m: MatrixBase)

      def `SetInvVarsAndMeans` as set_inv_vars_and_means(self, invvars: MatrixBase, means: MatrixBase)

      def `SetInvVars` as set_inv_vars(self, v: MatrixBase)

      def `GetVars` as get_vars(self) -> Matrix:
        
        return _matrix_wrapper(...)

      def `GetMeans` as get_means(self) -> Matrix:
        
        return _matrix_wrapper(...)

      def `SetComponentMean` as set_component_mean(self, gauss: int, in: VectorBase)
      def `SetComponentInvVar` as set_component_inv_var(self, gauss: int, in: VectorBase)

      def `SetComponentWeight` as set_component_weight(self, gauss: int, weight: float)

      def `GetComponentMean` as get_component_mean(self, gauss: int, out: VectorBase)

      def `GetComponentVariance` as get_component_variance(self, gauss: int, out: VectorBase)
